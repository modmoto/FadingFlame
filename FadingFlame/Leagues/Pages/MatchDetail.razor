@page "/league/{leagueId}/match/{matchId}"
@using MongoDB.Bson
@using FadingFlame.Leagues
@using FadingFlame.Players
@using FadingFlame.UserAccounts
@using Microsoft.AspNetCore.Components

@if (_league == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    if (CanEditMatch)
    {
        if (_matchWasFinished)
        {
            <div class="alert alert-danger" role="alert">
                The match was allready reported, you can not alter it anymore
            </div>
        }
        else
        {
            if (_allPlayersSelectedList)
            {
                <div class="row align-items-start">
                    <div class="col">
                        <div class="form-group">
                            <label>List of @_name1: </label>
                            <div><b>@_selectedListPlayer1</b></div>
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-group">
                            <label>List of @_name2: </label>
                            <div><b>@_selectedListPlayer2</b></div>
                        </div>
                    </div>
                </div>
                
                <EditForm Model="@_model" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator/>
                <div class="row align-items-start">
                    <div class="col form-group">
                        <label>Victory Points @_name1 :</label>
                        <InputNumber @bind-Value="_model.Player1.VictoryPoints" class="form-control"/>
                        <ValidationMessage For="@(() => _model.Player1.VictoryPoints)"/>
                        <hr class="my-2">
                        <div class="form-check">
                            <InputCheckbox class="form-check-input" @onclick="() => Select2ndObjective(1)" @bind-Value="_secondaryObjectivePlayer1"/>
                            <label class="form-check-label">
                                Won secondary objective
                            </label>
                        </div>
                    </div>
                    <div class="col form-group">
                        <label>Victory Points @_name2 :</label>
                        <InputNumber @bind-Value="_model.Player2.VictoryPoints" class="form-control"/>
                        <ValidationMessage For="@(() => _model.Player2.VictoryPoints)"/>
                        <hr class="my-2">
                        <div class="form-check">
                            <InputCheckbox class="form-check-input" @onclick="() => Select2ndObjective(2)" @bind-Value="_secondaryObjectivePlayer2"/>
                            <label class="form-check-label">
                                Won secondary objective
                            </label>
                        </div>
                    </div>
                </div>
                <hr class="my-3">
                <button disabled="@_loading" class="btn btn-primary">
                    @if (_loading)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Report Game
                </button>
                </EditForm>
            }
            else
            {
                if (_listsOfLoggedInPlayer == null)
                {
                    <div class="alert alert-danger" role="alert">
                        You did not submit a list, submit a list on your profile!
                    </div>
                }
                else if (!string.IsNullOrEmpty(_selectedListAsString))
                {
                    <div class="row align-items-start">
                        <div class="col">
                            <div class="form-group">
                                <label>Your list for the match: </label>
                                <div><b>@_selectedListAsString</b></div>
                                <div>Waiting for your opponent to select his list...</div>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="row align-items-start">
                        <div class="col">
                            <div class="form-group">
                                <label>List: </label>
                                <select class="form-select form-select-lg mb-3" aria-label=".form-select-lg example" @bind="_selectedList">
                                    <option selected value="0">Select your list</option>
                                    <option value="1">@_listsOfLoggedInPlayer.List1.Name</option>
                                    <option value="2">@_listsOfLoggedInPlayer.List2.Name</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <button disabled="@_selectingList" class="btn btn-primary" @onclick="() => SelectListForMatch()">
                        @if (_selectingList)
                        {
                            <span class="spinner-border spinner-border-sm mr-1"></span>
                        }
                        Select list for match
                    </button>
                    <hr class="my-5">
                }
            }
        }
    }
    else
    {
        <div class="alert alert-danger" role="alert">
            You are not allowed to edit the match
        </div>
    }
}

@inject NavigationManager _navigation
@inject ILeagueRepository _leagueRepository
@inject IPlayerRepository _playerRepository
@inject UserState _userState

@code {
    [Parameter]
    public string LeagueId { get; set; }
    [Parameter]
    public string MatchId { get; set; }
    private MatchResultDto _model = new();
    private League _league;
    private SeasonArmy _listsOfLoggedInPlayer;
    private int _selectedList;
    private bool _loading;
    private string _name1;
    private string _name2;
    private string _selectedListPlayer1;
    private string _selectedListPlayer2;
    private bool _secondaryObjectivePlayer1;
    private bool _secondaryObjectivePlayer2;
    private string _selectedListAsString;
    private bool _matchWasFinished;
    private bool _allPlayersSelectedList;
    private bool _selectingList;
    private bool Player1LoggedIn => _model.Player1.Id == _userState.LoggedInPlayerId;
    private bool Player2LoggedIn =>_model.Player2.Id == _userState.LoggedInPlayerId;
    private bool CanEditMatch => Player1LoggedIn || Player2LoggedIn;

    protected override void OnInitialized()
    {
        _userState.UserLoggedIn += (_, _) => StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        if (ObjectId.TryParse(LeagueId, out var realLeagueId))
        {
            var league = await _leagueRepository.Load(realLeagueId);
            if (league == null)
            {
                _navigation.NavigateTo("notfound");
            }
            else
            {
                var match = league.GameDays
                    .SelectMany(g => g.Matchups)
                    .SingleOrDefault(m => m.MatchId.ToString() ==  MatchId);
                if (match == null)
                {
                    _navigation.NavigateTo("notfound");
                }
                else
                {
                    var player1 = await _playerRepository.Load(match.Player1);
                    var player2 = await _playerRepository.Load(match.Player2);

                    _model.Player1.Id = match.Player1;
                    _model.Player1.Id = match.Player1;
                    _model.Player2.Id = match.Player2;

                    _name1 = player1.DisplayName;
                    _name2 = player2.DisplayName;
                    _model.MatchId = match.MatchId;
                    _matchWasFinished = match.Result != null;
                    _allPlayersSelectedList = match.PlayersSelectedList;
                    _selectedListPlayer1 = match.Player1List;
                    _selectedListPlayer2 = match.Player2List;
                    _league = league;

                    if (Player1LoggedIn)
                    {
                        _listsOfLoggedInPlayer = player1.Army;
                        _selectedListAsString = match.Player1List;
                    }

                    if (Player2LoggedIn)
                    {
                        _listsOfLoggedInPlayer = player2.Army;
                        _selectedListAsString = match.Player2List;
                    }

                    StateHasChanged();
                }
            }
        }
        else
        {
            _navigation.NavigateTo("notfound");
        }
    }

    private async Task OnValidSubmit()
    {
        if (CanEditMatch)
        {
            _loading = true;
            if (_league != null)
            {
                _model.SecondaryObjective = ConvertToEnum();
                _league.ReportGame(_model);
                await _leagueRepository.Update(_league);
            }

            _loading = false;
            _navigation.NavigateTo($"league/{LeagueId}");
        }
    }

    private SecondaryObjectiveState ConvertToEnum()
    {
        if (!_secondaryObjectivePlayer1 && !_secondaryObjectivePlayer2)
        {
            return SecondaryObjectiveState.draw;
        }
        
        return _secondaryObjectivePlayer1 ? SecondaryObjectiveState.player1 : SecondaryObjectiveState.player2;
    }

    private async Task SelectListForMatch()
    {
        _selectingList = true;
        if (Player1LoggedIn)
        {
            UpdateSelectedList(_model.Player1.Id);
        }

        if (Player2LoggedIn)
        {
            UpdateSelectedList(_model.Player2.Id);
        }

        await _leagueRepository.Update(_league);
        var matchup = _league.GetMatchup(new ObjectId(MatchId));
        _allPlayersSelectedList = matchup.PlayersSelectedList;
        _selectedListPlayer1 = matchup.Player1List;
        _selectedListPlayer2 = matchup.Player2List;
        _selectingList = false;
    }

    private void UpdateSelectedList(ObjectId playerId)
    {
        if (_selectedList == 1)
        {
            _league.SelectList(playerId, new ObjectId(MatchId), _listsOfLoggedInPlayer.List1.Name);
            _selectedListAsString = _listsOfLoggedInPlayer.List1.Name;
        }

        if (_selectedList == 2)
        {
            _league.SelectList(playerId, new ObjectId(MatchId), _listsOfLoggedInPlayer.List2.Name);
            _selectedListAsString = _listsOfLoggedInPlayer.List2.Name;
        }
    }

    private void Select2ndObjective(int player)
    {
        if (player == 1)
        {
            _secondaryObjectivePlayer2 = false;
        }
        
        if (player == 2)
        {
            _secondaryObjectivePlayer1 = false;
        }
    }

}