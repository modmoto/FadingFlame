@page "/league/{leagueId?}"
@using MongoDB.Bson
@using FadingFlame.Leagues
@using FadingFlame.Players
@using FadingFlame.Admin
@using FadingFlame.Lists
@using FadingFlame.Matchups

@if (_league == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div>
        <h1>@_league.DivisionId @_league.Name</h1>
        <hr class="my-4">
    </div>
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Faction</th>
            <th>Battle Points</th>
            <th>Victory Points</th>
            <th>Penalty Points</th>
            <th>Matches</th>
        </tr>
        </thead>
        <tbody class="league table table-hover">
        @foreach (var item in _league.Players.Select((value, index) => new { value, index }))
        {
            <tr>
                <td>
                    <NavLink class="nolinkstyle" Match="NavLinkMatch.All" href="@($"player/{item.value.Id}")">
                        @GetName(item.value.Id)
                    </NavLink>
                </td>
                <td>@GetRace(item.value.Id)</td>
                <td>@item.value.BattlePoints</td>
                <td>@item.value.VictoryPoints</td>
                <td @onclick:stopPropagation="true">
                    @if (_loggedInUserState.UserIsAdmin)
                    {
                        <div style="display: flex; flex-direction: row; max-width: 400px">
                            @if (item.value.Id == ObjectId.Empty)
                            {
                                <select class="form-select" @bind="_selectedNewPlayerIdRaw" style="max-width: 200px">
                                    <option selected value="@ObjectId.Empty.ToString()">Select player</option>
                                    @foreach (var player in _playersNotInLeagues)
                                    {
                                        <option value="@player.Id.ToString()">@player.DisplayName / @player.DiscordTag</option>
                                    }
                                </select>
                                <button @onclick="() => AddToLeague(_selectedNewPlayerIdRaw)" disabled="@_loadingAdmin" class="btn btn-danger ms-1">
                                    @if (_loadingAdmin)
                                    {
                                        <span class="spinner-border spinner-border-sm mr-1"></span>
                                    }
                                    <span class="oi oi-shield me-2" aria-hidden="true"></span>Add
                                </button>
                            }
                            else
                            {
                                <EditForm OnSubmit="() => OnSubmitPenalty(_penalties[item.index])" Model="@_penalties[item.index]">
                                    <DataAnnotationsValidator/>
                                    <div style="display: flex; flex-direction: row;">
                                        <div class="form-group" style="max-width: 5rem; margin-bottom: 0!important;">
                                            <InputNumber @bind-Value="_penalties[item.index].PenaltyPoints" class="form-control"/>
                                            <ValidationMessage For="@(() => _penalties[item.index].PenaltyPoints)"/>
                                        </div>
                                        <button @onclick:stopPropagation="false" disabled="@_loadingAdmin" class="btn btn-danger ms-1">
                                            @if (_loadingAdmin)
                                            {
                                                <span class="spinner-border spinner-border-sm mr-1"></span>
                                            }
                                            <span class="oi oi-shield me-2" aria-hidden="true"></span>Save
                                        </button>
                                    </div>
                                </EditForm>
                                <button @onclick="() => RemoveFromLeague(item.value.Id)" disabled="@_loadingAdmin" class="btn btn-danger ms-1">
                                    @if (_loadingAdmin)
                                    {
                                        <span class="spinner-border spinner-border-sm mr-1"></span>
                                    }
                                    <span class="oi oi-shield me-2" aria-hidden="true"></span>Remove
                                </button>
                            }
                        </div>
                    }
                    else
                    {
                        @(_penalties[item.index].PenaltyPoints)
                    }
                </td>
                <td>@item.value.GamesCount</td>
            </tr>
        }
        </tbody>
    </table>
    @if (_league.Players.Count != League.MaxPlayerCount)
    {
        <button
            class="btn btn-danger"
            type="button"
            @onclick="AddFreewinPlayer"
        >
            Add free win dummy player
        </button> 
    }
    <div>
        <h2>Gamedays</h2>
        <hr class="my-4">
    </div>
    
    <ul class="nav nav-pills mb-3" id="gameday-league-tab" role="tablist">
        @foreach (var gameDay in _league.GameDays.Select((value, index) => new { value, index }))
        {
            <li class="nav-item" role="presentation">
                @if (_activeDay == gameDay.index)
                {
                    <button
                        class="nav-link active"
                        id="@("game-day-" + gameDay.index + 1)"
                        data-bs-toggle="tab"
                        data-bs-target="@("#game-day-" + gameDay.index + 1)"
                        type="button"
                        role="tab"
                        aria-controls="home"
                        @onclick="() => SelectGameDay(gameDay.index)"
                        aria-selected="true"
                    >
                        @GetGameDay(gameDay.index)
                    </button>
                }
                else
                {
                    <button
                        class="nav-link"
                        id="@("game-day-" + gameDay.index + 1)"
                        data-bs-toggle="tab"
                        data-bs-target="@("#game-day-" + gameDay.index + 1)"
                        type="button"
                        role="tab"
                        aria-controls="home"
                        @onclick="() => SelectGameDay(gameDay.index)"
                        aria-selected="true"
                    >
                        @GetGameDay(gameDay.index)
                    </button>
                }
            </li>
        }
    </ul>
    <div class="tab-content" id="gameday-league-tabContent"> 
        @foreach (var gameDay in _league.GameDays.Select((value, index) => new {value, index}))
        {
            <div class="@GetActiveOrNot(gameDay.index)" id="@("game-day-league-" + gameDay.index + 1)" role="tabpanel" aria-labelledby="@("#game-day-league-" + gameDay.index + 1)">
                @if (gameDay.index == 5)
                {
                    <div class="lead mb-3">@_league.GameDays.SkipLast(1).Last().EndDate.ToMyDate() - @_league.RelegationDeadLine.ToMyDate()  —  @Deployment.RandomDeployment.ToCamelCaseString() with @SecondaryObjective.RandomObjective.ToCamelCaseString()</div>
                }
                else
                {
                    <div class="lead mb-3">@gameDay.value.StartDate.ToMyDate() - @gameDay.value.EndDate.ToMyDate()  —  @gameDay.value.Deployment.ToCamelCaseString() with @gameDay.value.SecondaryObjective.ToCamelCaseString()</div>
                }
                <div class="row row-cols-auto justify-content-around">
                    @foreach (var matchup in gameDay.value.Matchups)
                    {
                        <NavLink class="nolinkstyle" Match="NavLinkMatch.All" href="@($"match/{matchup.Id}?leagueId={_league.Id}")">
                            <div class="col pb-4">
                                <div class="@GetClasses(matchup)" style="width: 24rem;">
                                    <div class="card-header">
                                        <div class="d-flex w-100 justify-content-between">
                                            <h5 class="mb-1">@(GetName(matchup.Player1)) vs @(GetName(matchup.Player2))</h5>
                                            <small>@matchup.Result?.RecordedAt.ToMyDate()</small>
                                        </div>
                                    </div>
                                    <div class="card-body">
                                        @if (matchup.Result != null)
                                        {
                                            <p class="mb-1">@matchup.Result.Player1.BattlePoints : @matchup.Result.Player2.BattlePoints</p>
                                            <small>@GetOriginalPointsString(matchup.Result)</small>
                                        }
                                        else
                                        {
                                            <p class="mb-1">not reported yet</p>
                                        }
                                    </div>
                                </div>
                            </div>
                        </NavLink>
                    }
                </div>
            </div>
        }
    </div>
}

@inject ILeagueRepository _leagueRepository
@inject IPlayerRepository _playerRepository
@inject LoggedInUserState _loggedInUserState

@code {
    [Parameter]
    public string LeagueId { get; set; }
    
    private League _league;
    private int _activeDay;
    private bool _loadingAdmin;
    private string _selectedNewPlayerIdRaw = ObjectId.Empty.ToString();
    private List<Player> _playersNotInLeagues = new();
    private List<Player> _playersInLeague = new();
    private List<PenaltyModel> _penalties = new();

    protected override void OnInitialized()
    {
        _loggedInUserState.UserLoggedIn += (_, _) => StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        if (ObjectId.TryParse(LeagueId, out var parsed))
        {
            _league = await _leagueRepository.Load(parsed);
            _penalties = MapPenalties(_league);
            _playersInLeague = await _playerRepository.LoadForLeague(_league.Players.Select(p => p.Id).ToList());
            _playersNotInLeagues = (await _playerRepository.LoadAll()).OrderBy(p => p.DisplayName).ToList();
            var now = DateTime.UtcNow;
            for (int i = 0; i < _league.GameDays.Count; i++)
            {
                if (now < _league.GameDays[i].EndDate)
                {
                    _activeDay = i;
                    break;
                }
            }
        }
    }

    private async void AddFreewinPlayer()
    {
        var freeWinPlayer = await _playerRepository.Load(LeagueConstants.FreeWinPlayer);
        if (freeWinPlayer == null)
        {
            freeWinPlayer = Player.Create("Free Win Dummy", $"{LeagueConstants.FreeWinPlayer}@lel.de");
            freeWinPlayer.Id = LeagueConstants.FreeWinPlayer;
            freeWinPlayer.Mmr = new Mmr();
            var dummyList = new GameList 
            { 
                Faction = Faction.None,
                List = "Dummy"
            };
            freeWinPlayer.ArmyCurrentSeason = new Army
            {
                List1 = dummyList,
                List2 = dummyList
            };
            freeWinPlayer.ArmyNextSeason = new Army
            {
                List1 = dummyList,
                List2 = dummyList
            };
            await _playerRepository.UpdateWithLists(freeWinPlayer);
        }
        else
        {
            freeWinPlayer.ArmyNextSeason = freeWinPlayer.ArmyCurrentSeason;
            freeWinPlayer.ArmyIdNextSeason = freeWinPlayer.ArmyIdCurrentSeason;
            await _playerRepository.UpdateWithLists(freeWinPlayer);
        }
        
        _league.AddPlayer(freeWinPlayer);
        await _leagueRepository.Update(_league);
    }
    
    private string GetActiveOrNot(int index)
    {
        return index == _activeDay ? "tab-pane fade show active" : "tab-pane fade";
    }

    private void SelectGameDay(int id)
    {
        _activeDay = id;
        StateHasChanged();
    }

    private string GetSecondaryStringForPlayer1(SecondaryObjectiveState resultSecondaryObjective)
    {
        return resultSecondaryObjective == SecondaryObjectiveState.player1 ? "(+2nd obj.)" : "";
    }

    private string GetSecondaryStringForPlayer2(SecondaryObjectiveState resultSecondaryObjective)
    {
        return resultSecondaryObjective == SecondaryObjectiveState.player2 ? "(+2nd obj.)" : "";
    }

    private string GetClasses(Matchup matchup)
    {
        return UserIsOneOfThePlayers(matchup) ? "bg-light card cursor" : "card cursor";
    }

    private bool UserIsOneOfThePlayers(Matchup matchup)
    {
        return _loggedInUserState.LoggedInPlayer.Id == matchup.Player1 || _loggedInUserState.LoggedInPlayer.Id == matchup.Player2;
    }

    private string GetOriginalPointsString(MatchResult result)
    {
        return $"{result.Player1.VictoryPoints} {GetSecondaryStringForPlayer1(result.SecondaryObjective)} : {result.Player2.VictoryPoints} {GetSecondaryStringForPlayer2(result.SecondaryObjective)}";
    }

    private string GetName(ObjectId playerId)
    {
        var player = _playersInLeague.FirstOrDefault(p => p.Id == playerId)
                     ?? _playersNotInLeagues.SingleOrDefault(p => p.Id == playerId);

        return player?.DisplayName;
    }
    
    private string GetRace(ObjectId playerId)
    {
        var player = _playersInLeague.FirstOrDefault(p => p.Id == playerId);
        if (player == null) return "";
        var factions = new List<Faction?> { player.ArmyCurrentSeason?.List1?.Faction, player?.ArmyCurrentSeason?.List2?.Faction }.Where(l => l != null).Distinct();
        return string.Join("/", factions.Select(f => f.Value.ToCamelCaseString()));
    }

    private async Task OnSubmitPenalty(PenaltyModel model)
    {
        _loadingAdmin = true;
        _league.PenaltyPointsForPlayer(model.PlayerId, model.PenaltyPoints);
        _penalties = MapPenalties(_league);
        await _leagueRepository.Update(_league);
        _loadingAdmin = false;
    }

    private List<PenaltyModel> MapPenalties(League league)
    {
        return league.Players.Select(p => new PenaltyModel(p.Id, p.PenaltyPoints)).ToList();
    }

    private async Task RemoveFromLeague(ObjectId playerId)
    {
        _loadingAdmin = true;
        _league.RemoveFromLeague(playerId);
        await _leagueRepository.Update(_league);
        StateHasChanged();
        _loadingAdmin = false;
    }
    
    private async Task AddToLeague(string selectedNewPlayerIdRaw)
    {
        _loadingAdmin = true;
        _league.ReplaceDummyPlayer(new ObjectId(selectedNewPlayerIdRaw));
        await _leagueRepository.Update(_league);
        StateHasChanged();
        _loadingAdmin = false;
    }

    private static string GetGameDay(int gameDay)
    {
        return gameDay == League.MaxPlayerCount - 1 ? "Relegation" : $"{gameDay + 1}";
    }
}