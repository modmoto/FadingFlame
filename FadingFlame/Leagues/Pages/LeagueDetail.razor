@page "/league/{leagueId?}"
@using MongoDB.Bson
@using FadingFlame.Leagues
@using FadingFlame.Players

@inject NavigationManager _navigation
@inject UserState _userState


@if (_league == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div>
        <h1>@_league.DivisionId @_league.Name</h1>
        <hr class="my-4">
    </div>
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Faction</th>
            <th>Battle Points</th>
            <th>Victory Points</th>
            <th>Matches</th>
        </tr>
        </thead>
        <tbody class="league">
        @foreach (var playerInLeague in _league.Players)
        {
            <tr @onclick="() => GoToPlayer(playerInLeague.Id)" class="cursor" >
                <td>@GetName(playerInLeague.Id)</td>
                <td>@GetRace(playerInLeague.Id)</td>
                <td>@playerInLeague.Points</td>
                <td>@playerInLeague.VictoryPoints</td>
                <td>@playerInLeague.GamesCount</td>
            </tr>
        }
        </tbody>
    </table>    
    
    
    <div>
        <h2>Gamedays</h2>
        <hr class="my-4">
    </div>
    
    <ul class="nav nav-pills mb-3" id="pills-tab" role="tablist">
        @foreach (var gameDay in _league.GameDays.Select((value, index) => new { value, index }))
        {
            <li class="nav-item" role="presentation">
                @if (_activeDay == gameDay.index)
                {
                    <button
                        class="nav-link active"
                        id="pills-home-tab"
                        data-bs-toggle="pill"
                        data-bs-target="#pills-home"
                        type="button"
                        role="tab"
                        aria-controls="pills-home"
                        aria-selected="true"
                        @onclick="() => SelectGameDay(gameDay.index)"
                    >
                        @(gameDay.index + 1)
                    </button>
                }
                else
                {
                    <button
                        class="nav-link"
                        id="pills-home-tab"
                        data-bs-toggle="pill"
                        data-bs-target="#pills-home"
                        type="button"
                        role="tab"
                        aria-controls="pills-home"
                        aria-selected="true"
                        @onclick="() => SelectGameDay(gameDay.index)"
                    >
                        @(gameDay.index + 1)
                    </button>
                }
            </li>
        }
    </ul>
    <div class="tab-content" id="pills-tabContent">
        @foreach (var gameDay in _league.GameDays.Select((value, index) => new {value, index}))
        {
            @if (_activeDay == gameDay.index)
            {
                <p class="lead">@gameDay.value.StartDate.ToString("dd.MM.") - @gameDay.value.EndDate.ToString("dd.MM.")</p>
                <div class="tab-pane fade show active" id="pills-home" role="tabpanel" aria-labelledby="pills-home-tab">
                    <div class="row row-cols-auto justify-content-around">
                        @foreach (var matchup in gameDay.value.Matchups)
                        {
                            <div class="col pb-4" >
                                <div class="@GetClasses(matchup)" @onclick="() => GoToMatch(matchup)" style="width: 24rem;">
                                    <div class="card-header">
                                        <div class="d-flex w-100 justify-content-between">
                                            <h5 class="mb-1">@(GetName(matchup.Player1)) vs @(GetName(matchup.Player2))</h5>
                                            <small>@matchup.Result?.RecordedAt.ToString("dd.MM.")</small>
                                        </div>
                                    </div>
                                    <div class="card-body">
                                        @if (matchup.Result != null)
                                        {
                                            <p class="mb-1">@matchup.Result.Player1.BattlePoints : @matchup.Result.Player2.BattlePoints</p>
                                            <small>@GetOriginalPointsString(matchup.Result)</small>
                                        }
                                        else
                                        {
                                            <p class="mb-1">not reported yet</p>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="tab-pane fade" id="pills-home" role="tabpanel" aria-labelledby="pills-home-tab">
                </div>
            }
        }
    </div>
}

@inject ILeagueRepository _leagueRepository
@inject IPlayerRepository _playerRepository

@code {
    [Parameter]
    public string LeagueId { get; set; }
    
    private League _league;
    private int _activeDay;
    private List<Player> _playersInLeague = new();

    protected override void OnInitialized()
    {
        _userState.UserLoggedIn += (_, _) => StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        if (ObjectId.TryParse(LeagueId, out var parsed))
        {
            _league = await _leagueRepository.Load(parsed);
            _playersInLeague = await _playerRepository.LoadForLeague(_league.Players.Select(p => p.Id).ToList());
            var now = DateTimeOffset.UtcNow;
            for (int i = 0; i < _league.GameDays.Count; i++)
            {
                if (now < _league.GameDays[i].EndDate)
                {
                    _activeDay = i;
                    break;
                }
            }
        }
    }

    private void GoToPlayer(ObjectId playerId)
    {
        _navigation.NavigateTo($"player/{playerId}");
    }

    private void SelectGameDay(int id)
    {
        _activeDay = id;
        StateHasChanged();
    }

    private void GoToMatch(Matchup matchup)
    {
        if (UserIsOneOfThePlayers(matchup))
        {
            _navigation.NavigateTo($"match/{matchup.MatchId}?leagueId={_league.Id}");
        }
    }

    private string GetSecondaryStringForPlayer1(SecondaryObjectiveState resultSecondaryObjective)
    {
        return resultSecondaryObjective == SecondaryObjectiveState.player1 ? "(+2nd obj.)" : "";
    }

    private string GetSecondaryStringForPlayer2(SecondaryObjectiveState resultSecondaryObjective)
    {
        return resultSecondaryObjective == SecondaryObjectiveState.player2 ? "(+2nd obj.)" : "";
    }

    private string GetClasses(Matchup matchup)
    {
        return UserIsOneOfThePlayers(matchup) ? "card bg-light cursor" : "card";
    }

    private bool UserIsOneOfThePlayers(Matchup matchup)
    {
        return _userState.LoggedInPlayerId == matchup.Player1 || _userState.LoggedInPlayerId == matchup.Player2;
    }

    private string GetOriginalPointsString(MatchResult result)
    {
        return $"{result.Player1.VictoryPoints} {GetSecondaryStringForPlayer1(result.SecondaryObjective)} : {result.Player2.VictoryPoints} {GetSecondaryStringForPlayer2(result.SecondaryObjective)}";
    }

    private string GetName(ObjectId playerId)
    {
        return _playersInLeague.FirstOrDefault(p => p.Id == playerId)?.DisplayName;
    }
    
    private string GetRace(ObjectId playerId)
    {
        var player = _playersInLeague.FirstOrDefault(p => p.Id == playerId);
        if (player == null) return "";
        var factions = new List<Faction?> { player.Army?.List1?.Faction, player?.Army?.List2?.Faction }.Where(l => l != null).Distinct();
        return string.Join("/", factions.Select(f => f.Value.ToFactionString()));
    }
}