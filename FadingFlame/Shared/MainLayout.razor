@using FadingFlame.Players
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Http
@using FadingFlame.Admin
@inherits LayoutComponentBase
@inject IPlayerRepository _playerRepository
@inject UserState _userState
@inject SeasonState _seasonState
@inject NavigationManager _navigation
@inject IHttpContextAccessor _httpContextAccessor
@inject ISeasonRepository _seasonRepository

<div class="page">
    <div class="sidebar">
        <NavMenu/>
    </div>

    <div class="main">
        <div class="top-row px-4">
            <AuthorizeView>
                <Authorized>
                    <span><a href="@($"/player/{_userState.LoggedInPlayer.Id}")">My profile</a></span>
                    <a href="/Logout">
                        <span class="oi oi-account-logout" aria-hidden="true"></span>
                    </a>
                </Authorized>
                <NotAuthorized>
                    <a class="btn btn-primary" href="/Login">
                        <span class="oi oi-account-login" aria-hidden="true"></span><span class="m-2">Login</span>
                    </a>
                </NotAuthorized>
            </AuthorizeView>
        </div>

        <div class="content px-4">
            @Body
        </div>
        
        <div class="text-center p-3 pt-5 cursor" @onclick="() => GoToImprint()">
            Imprint
        </div>    
    </div>
</div>

@code
{
    protected override void OnInitialized()
    {
        _userState.UserLoggedIn += (_, _) => StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var httpContext = _httpContextAccessor.HttpContext;
        if (httpContext != null)
        {
            await httpContext.AuthenticateAsync("Cookies");
            
            if (_userState.UserIsLoggedIn)
            {
                var player = await _playerRepository.LoadByEmail(_userState.AccountEmail);
                if (player == null)
                {
                    player = Player.Create(_userState.UserName, _userState.AccountEmail);
                    await _playerRepository.Insert(player);
                }
                _userState.SetUserData(player);
            }
        }

        var loadSeasons = await _seasonRepository.LoadSeasons();
        _seasonState.SetSeasons(loadSeasons[1], loadSeasons[0]);
    }

    public void GoToImprint()
    {
        _navigation.NavigateTo("imprint");
    }
}
