@using FadingFlame.Players
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Http
@using FadingFlame.Admin
@using Microsoft.Extensions.Logging
@using LoggerExtensions = DnsClient.Internal.LoggerExtensions
@inherits LayoutComponentBase

<div class="page">
    <div class="sidebar">
        <NavMenu/>
    </div>

    <div class="main">
        <div class="top-row px-4">
            <div class="mr-3 cursor" @onclick="GotToInvite">
                <svg class="cursor" fill="#000000" xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 50 50" width="3rem" height="3rem"><path d="M42.298,11.65c-0.676-1.021-1.633-1.802-2.768-2.256c-2.464-0.988-4.583-1.648-6.479-2.02	C31.721,7.114,30.404,7.768,29.771,9l-0.158,0.308c-1.404-0.155-2.895-0.207-4.593-0.164c-1.741-0.042-3.237,0.009-4.643,0.164	L20.22,9c-0.633-1.232-1.952-1.885-3.279-1.625c-1.896,0.371-4.016,1.031-6.479,2.02c-1.134,0.454-2.091,1.234-2.768,2.256	c-4.721,7.131-6.571,14.823-5.655,23.517c0.032,0.305,0.202,0.578,0.461,0.741c3.632,2.29,6.775,3.858,9.891,4.936	c1.303,0.455,2.748-0.054,3.517-1.229l1.371-2.101c-1.092-0.412-2.158-0.9-3.18-1.483c-0.479-0.273-0.646-0.884-0.373-1.363	c0.273-0.481,0.884-0.65,1.364-0.373c3.041,1.734,6.479,2.651,9.942,2.651s6.901-0.917,9.942-2.651	c0.479-0.277,1.09-0.108,1.364,0.373c0.273,0.479,0.106,1.09-0.373,1.363c-1.056,0.603-2.16,1.105-3.291,1.524l1.411,2.102	c0.581,0.865,1.54,1.357,2.528,1.357c0.322,0,0.647-0.053,0.963-0.161c3.125-1.079,6.274-2.649,9.914-4.944	c0.259-0.163,0.429-0.437,0.461-0.741C48.869,26.474,47.019,18.781,42.298,11.65z M18.608,28.983c-1.926,0-3.511-2.029-3.511-4.495	c0-2.466,1.585-4.495,3.511-4.495s3.511,2.029,3.511,4.495C22.119,26.954,20.534,28.983,18.608,28.983z M31.601,28.957	c-1.908,0-3.478-2.041-3.478-4.522s1.57-4.522,3.478-4.522c1.908,0,3.478,2.041,3.478,4.522S33.509,28.957,31.601,28.957z"/></svg>
            </div>
            <AuthorizeView>
                <Authorized>
                    <span><a href="@($"/player/{_userState.LoggedInPlayer.Id}")">My profile</a></span>
                    <a href="/Logout">
                        <span class="oi oi-account-logout" aria-hidden="true"></span>
                    </a>
                </Authorized>
                <NotAuthorized>
                    <a class="btn btn-primary" href="/Login">
                        <span class="oi oi-account-login" aria-hidden="true"></span><span class="m-2">Login</span>
                    </a>
                </NotAuthorized>
            </AuthorizeView>
        </div>
        <div class="content px-4">
            <button @onclick="() => SetLocationData(null, EventArgs.Empty)">do thing</button>
            @Body
        </div>
        
        <div class="text-center p-3 pt-5 cursor" @onclick="() => GoToImprint()">
            Imprint
        </div>    
    </div>
</div>

@inject IPlayerRepository _playerRepository
@inject UserState _userState
@inject SeasonState _seasonState
@inject NavigationManager _navigation
@inject IHttpContextAccessor _httpContextAccessor
@inject ISeasonRepository _seasonRepository
@inject IGeoLocationService _geoLocationService
@inject ILogger<MainLayout> _logger

@code
{
    protected override void OnInitialized()
    {
        _userState.UserLoggedIn += (_,_) => StateHasChanged();
    }

    private async void SetLocationData(object sender, EventArgs eventArgs)
    {
        _logger.LogInformation("Went into Set Location data");
        var player = _userState.LoggedInPlayer;
        if (player.Location == null)
        {
            _logger.LogInformation("player loc null");
            var location = await _geoLocationService.GetLoggedInUserLocation();
            player.SetLocalInformation(location);
            await _playerRepository.Update(player);
            
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _logger.LogInformation("on after render");
        if (firstRender)
        {
            _logger.LogInformation("on after render INSISDe");
            var loggedInUserTime = await _geoLocationService.GetLoggedInUserTime();
            _userState.SetUserTime(loggedInUserTime);
            
            _userState.UserLoggedIn += SetLocationData;
            
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        var httpContext = _httpContextAccessor.HttpContext;
        if (httpContext != null)
        {
            await httpContext.AuthenticateAsync("Cookies");
            
            if (_userState.UserIsLoggedIn)
            {
                var player = await _playerRepository.LoadByEmail(_userState.AccountEmail);
                if (player == null)
                {
                    player = Player.Create(_userState.UserName, _userState.AccountEmail);
                    await _playerRepository.Insert(player);
                }

                _userState.SetUserData(player);
            }
        }

        var loadSeasons = await _seasonRepository.LoadSeasons();
        _seasonState.SetSeasons(loadSeasons);
    }

    public void GoToImprint()
    {
        _navigation.NavigateTo("imprint");
    }

    private void GotToInvite()
    {
        _navigation.NavigateTo("https://discord.gg/rJKg8uzS");
    }
}
