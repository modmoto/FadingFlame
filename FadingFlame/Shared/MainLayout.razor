@using FadingFlame.UserAccounts
@using FadingFlame.Players
@using FadingFlame.Events
@inherits LayoutComponentBase
@inject IUserContext _userContext
@inject IUserAccountCommandHandler _commandHandler
@inject IPlayerRepository _playerRepository
@inject UserLoginState _userLoginState

<div class="page">
    <div class="sidebar">
        <NavMenu/>
    </div>

    <div class="main">
        <div class="top-row px-4" hidden="@IsLoggedIn">
            <a href="/login" >Login</a>
        </div>
        <div class="top-row px-4" hidden="@(!IsLoggedIn)">
            <span>Hello @UserName</span>
            <a href="/logout" @onclick="LogOut">Logout</a>
        </div>

        <div class="content px-4">
            @Body
        </div>
    </div>
</div>

@code
{
    public bool IsLoggedIn => _userLoginState.UserIsLoggedIn;
    public string UserName => _userLoginState.UserName;

    public async Task<string> GetUserName()
    {
        var userAccount = _userContext.GetUser();
        if (userAccount != null)
        {
            var player = await _playerRepository.Load(userAccount.PlayerId);
            return player.DisplayName ?? userAccount.Email;
        }

        return "";
    }

    private async Task LogOut()
    {
        await _commandHandler.Logout();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool what)
    {
        if (!IsLoggedIn)
        {
            await _commandHandler.LoginFromCookie();
            var userName = await GetUserName();
            _userLoginState.SetUserLoggedIn(_userContext.GetUser().PlayerId, userName);
            StateHasChanged();
        }
    }
}
