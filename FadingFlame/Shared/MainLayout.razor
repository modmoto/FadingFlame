@using FadingFlame.UserAccounts
@using FadingFlame.Players
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Http
@using MongoDB.Bson
@inherits LayoutComponentBase
@inject IPlayerRepository _playerRepository
@inject UserState _userState
@inject NavigationManager _navigation
@inject IHttpContextAccessor _httpContextAccessor

<div class="page">
    <div class="sidebar">
        <NavMenu/>
    </div>

    <div class="main">
        <div class="top-row px-4" hidden="@IsLoggedIn">
            <a href="/Login">
                <span class="oi oi-account-login" aria-hidden="true"></span>
            </a>
        </div>
        <div class="top-row px-4" hidden="@(!IsLoggedIn)">
            <span>Hello<a href="@Link">@UserName</a></span>
            <a href="/Logout">
                <span class="oi oi-account-logout" aria-hidden="true"></span>
            </a>
        </div>

        <div class="content px-4">
            @Body
        </div>
        
        <div class="text-center p-3 pt-5 cursor" @onclick="() => GoToImprint()">
            Imprint
        </div>    
    </div>
</div>

@code
{
    private bool IsLoggedIn => _userState.UserIsLoggedIn;
    private string UserName => _userState.UserName;
    public string Link => $"/player/{_userState.LoggedInPlayerId}";

    protected override void OnInitialized()
    {
        _userState.UserLoggedIn += (_, _) => StateHasChanged();
        _userState.UserLoggedOut += (_, _) => StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var contextAccessorHttpContext = _httpContextAccessor.HttpContext;
        if (contextAccessorHttpContext != null)
        {
            await contextAccessorHttpContext.AuthenticateAsync("Cookies");
            var claims = contextAccessorHttpContext.User.Claims.ToList();
            
            var email = claims.FirstOrDefault(c => c.Type == "email")?.Value;
            if (email != null)
            {
                var player = await _playerRepository.LoadByEmail(email);
                if (player == null)
                {
                    var name = claims.FirstOrDefault(c => c.Type == "name")?.Value;
                    player = Player.Create(name, email);
                    await _playerRepository.Insert(player);
                }
                _userState.SetUserLoggedIn(player.Id, player.DisplayName);
                StateHasChanged();
            }
        }
    }

    public void GoToImprint()
    {
        _navigation.NavigateTo("imprint");
    }
}
