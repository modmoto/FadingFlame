@page "/player/{Id}"
@using FadingFlame.Admin
@using FadingFlame.Discord
@using FadingFlame.Leagues
@using FadingFlame.Lists
@using FadingFlame.Matchups
@using System.Globalization
@using MongoDB.Bson
@using System.Text.RegularExpressions

<div class="card">
<div class="card-header">
  <h4>
    Profile @_player.DisplayName
    @if (_editUserModel.Country != null)
    {
      <span class="@($"ms-2 flag-container flag-icon flag-icon-{_editUserModel.Country?.ToLower()}")"></span>
    }
  </h4>
  <smal>@((int) (_player.Mmr?.Rating ?? 0)) ladder points</smal>
</div>

<div class="card-body">
<ul class="nav nav-tabs" id="myTab" role="tablist">
  <li class="nav-item" role="presentation">
    <button class="nav-link active" id="profile-tab" data-bs-toggle="tab" data-bs-target="#profile" type="button" role="tab" aria-controls="profile" aria-selected="true">Profile</button>
  </li>
  <li class="nav-item" role="presentation">
    <button class="nav-link" id="matches-tab" data-bs-toggle="tab" data-bs-target="#matches" type="button" role="tab" aria-controls="matches" aria-selected="false">Matches</button>
  </li>
  <li class="nav-item" role="presentation">
    <button class="nav-link" id="lists-tab" data-bs-toggle="tab" data-bs-target="#lists" type="button" role="tab" aria-controls="lists" aria-selected="false">Lists</button>
  </li>
  @if (_isTheRightUser && !SeasonState.NextSeason.ListSubmissionIsOver && SeasonState.NextSeason.IsPubliclyVisible || SeasonState.NextSeason.ListSubmissionIsOver && LoggedInUserState.UserIsAdmin && SeasonState.NextSeason.IsPubliclyVisible)
  {
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="lists-next-season-tab" data-bs-toggle="tab" data-bs-target="#lists-next-season" type="button" role="tab" aria-controls="lists" aria-selected="false">
        @if (_player.SubmitedListsNextSeason)
        {
          <span>Lists next Season</span>
        }
        else
        {
          <span>Enroll in next season!</span>
        }
      </button>
    </li>  
  }
</ul>
<div class="tab-content" id="myTabContent">
<div class="tab-pane fade show active pt-4" id="profile" role="tabpanel" aria-labelledby="profile-tab">
  @if (!_isTheRightUser && LoggedInUserState.UserIsLoggedIn)
  {
    <div class="form-group pb-3">
      @if (_challengeIdFromLoggedInUser != ObjectId.Empty)
      {
        <button class="btn btn-outline-success" @onclick="GoToChallenge">
          <span class="oi oi-fire me-2"></span>
          Go to active challenge against @_player.DisplayName
        </button>  
      }
      else
      {
        <button class="btn btn-outline-success" disabled="@_loadingChallengingPlayer" @onclick="ChallengePlayer">
          @if (_loading)
          {
            <span class="spinner-border spinner-border-sm mr-1"></span>
          }
          <span class="oi oi-fire me-2"></span>
          Challenge player to a game
        </button>
      }
    </div>
  }

  @if (_player.SubmitedListsNextSeason && !_isTheRightUser)
  {
    <div class="pb-3 alert alert-info" role="alert" style="max-width: 25rem">
      Player is participating in the next season!
    </div>
  }
  
  @if (_player.SubmitedListsNextSeason && _isTheRightUser)
    {
      <div class="pb-3 alert alert-info" role="alert" style="max-width: 25rem">
        You are participating in the next season, lists will be revealed soon!
      </div>
    }

  @if (UserParticipatesInCurrentSeason)
  {
    <div class="pt-3 pb-3 alert alert-success" role="alert" style="max-width: 25rem">
      <div class="cursor" @onclick="() => NavigateToLeague(_playerLeagues[0].Id)">Current league: @_playerLeagues[0].DivisionId @_playerLeagues[0].Name</div>
    </div>
  }

  @if (_challenges.Any() && _isTheRightUser)
  {
    <h4 class="mb-3">Open challenges</h4>
    @foreach (var challenge in _challenges)
    {
      <div class="pt-3 pb-3 alert alert-info d-flex justify-content-between" style="max-width: 25rem" role="alert">
        <div class="cursor col d-flex align-items-center" @onclick="() => NavigateToMatch(challenge)">
          vs @GetOpponent(challenge)
        </div>
      </div>
    }
  }

  @if (_isTheRightUser)
  {
    <EditForm OnSubmit="OnSubmit" EditContext="@_editContextUser">
      <div class="form-group">
        <div class="pb-2">Display name: </div>
        <ValidationMessage For="@(() => _editUserModel.DisplayName)"/>
        <InputText @bind-Value="_editUserModel.DisplayName" class="form-control mb-3"/>
      </div>
      <div class="form-group">
        <div class="pb-2">Discord tag: </div>
        <ValidationMessage For="@(() => _editUserModel.DiscordTag)"/>
        <InputText @bind-Value="_editUserModel.DiscordTag" class="form-control mb-3"/>
      </div>
      <div class="row">
        <div class="form-group col">
          <div class="pb-2">Country: </div>
          <div class="form-group">
            <select class="form-select form-select-lg mb-3" aria-label=".form-select-lg example" @bind="_editUserModel.Country">
              <option selected value="@Location.NotSelected">Dont show country</option>
              @foreach (var culture in _countries)
              {
                <option value="@culture.TwoLetterISORegionName">@culture.EnglishName</option>
              }
            </select>
          </div>
        </div>
        <div class="form-group col">
          <div class="pb-2">Timezone: </div>
          <select class="form-select form-select-lg mb-3" aria-label=".form-select-lg example" @bind="_editUserModel.TimeZone">
            <option selected value="@Location.NotSelected">Dont show timezone</option>
            @foreach (var timeZone in GeoLocationService.GetTimeZones())
            {
              <option value="@timeZone.Id">@timeZone.Id @(timeZone.BaseUtcOffset)</option>
            }
          </select>
        </div>
      </div>

      <button disabled="@_loading" class="btn btn-primary">
        @if (_loading)
        {
          <span class="spinner-border spinner-border-sm mr-1"></span>
        }
        Save profile
      </button>
    </EditForm>

    <hr class="my-3">

    @if (!SeasonState.CurrentSeason.ListSubmissionIsOver)
    {
      @if (!_player.SubmittedLists)
      {
        <div class="pt-3 pb-3 alert alert-warning text-center" role="alert">
          To participate in the next season, submit your lists here. The lists can not be changed after @SeasonState.CurrentSeason.ListSubmissionDeadline.ToMyDate() and are not visible to other players until then.
        </div>
      }
      else
      {
        <div class="pt-3 pb-3 alert alert-success text-center" role="alert">
          Lists submitted, you will participate in the next season. You can still change the lists until @SeasonState.CurrentSeason.ListSubmissionDeadline.ToMyDate() and they are not visible to other players until then.
        </div>
      }
    }
  }
  else
  {
    @if (_editUserModel.TimeZone != Location.NotSelected && LoggedInUserState.UserIsLoggedIn)
    {
      <div class="form-group pb-3">
        <label>Time difference to you: @(GeoLocationService.GetTimeDiff(LoggedInUserState.CurrentUserTime, _editUserModel.TimeZone).Hours)h (@_editUserModel.TimeZone)</label>
      </div>
    }
    <div class="form-group pb-3">
      <label>Discord Tag: </label>
      <span>@_editUserModel.DiscordTag</span>
    </div>
  }
  <h4 class="mt-4">Participated in Seasons</h4>
  @foreach (var league in _playerLeagues)
  {
    <div class="cursor" @onclick="() => NavigateToLeague(league.Id)">Season @league.Season, Division @league.DivisionId, Rank @GetRank(league)</div>
  }
</div>
<div class="tab-pane fade pt-4" id="matches" role="tabpanel" aria-labelledby="matches-tab">
  <table class="table table-striped table-hover">
    <thead>
    <th>Opponent</th>
    <th>Result</th>
    <th>Points</th>
    <th>Matchup</th>
    <th>Type</th>
    <th>Date</th>
    </thead>
    <tbody>
    @foreach (var matchup in _matches)
    {
      <tr @onclick="() => NavigateToMatch(matchup)" class="cursor">
        <td>@GetOpponent(matchup)</td>
        <td>
          @if (matchup.Result != null)
          {
            <p class="@($"mb-1 {WonMatch(matchup)}")">@GetBattlePointString(matchup.Result)</p>
            <small>@GetOriginalPointsString(matchup.Result)</small>
          }
          else
          {
            <p class="mb-1">not reported yet</p>
          }
        </td>
        <td>
          @if (matchup.Result != null)
          {
            <p class="@($"mb-1 {WonMatch(matchup)}")">@GetMmrDiff(matchup.Result)</p>
          }
        </td>
        <td>@GetRaceStrings(matchup.Result)</td>
        <td>@(matchup.IsChallenge ? "Challenge" : matchup.IsPlayoff ? "Playoffs" :  matchup.IsRelegation ? "Relegation" : "League")</td>
        <td>@matchup.Result?.RecordedAt.ToMyDateYear()</td>
      </tr>
    }
    </tbody>
  </table>
</div>
<div class="tab-pane fade pt-4" id="lists" role="tabpanel" aria-labelledby="lists-tab">
  @if (_player.SubmittedLists || _playerIsLateSignup)
  {
    <h4>Lists this season</h4>
    <EditForm EditContext="@_editContextLists">
      <DataAnnotationsValidator/>
      <div class="row align-items-start">
        <div class="col-xs-12 col-md-12 col-lg-6">
          <hr class="my-3">
          <ValidationMessage For="@(() => _editListModel.List1.List)"/>
          <UserListComponent
            List="@(_editListModel.List1)"
            IsFreshListPossible="_playerIsLateSignup"
            IsCurrentUser="_isTheRightUser"
            OnRequestListChange="RequestListChange1"
            OnDeleteListChange="DeleteListChange1"/>
        </div>
        <div class="col-xs-12 col-md-12 col-lg-6">
          <hr class="my-3">
          <ValidationMessage For="@(() => _editListModel.List2.List)"/>
          <UserListComponent
            List="@(_editListModel.List2)"
            IsFreshListPossible="_playerIsLateSignup"
            IsCurrentUser="_isTheRightUser"
            OnRequestListChange="RequestListChange2"
            OnDeleteListChange="DeleteListChange2"/>
        </div>
      </div>

      @if (_playerIsLateSignup)
      {
        <button disabled="@_loadingLateListSubmit" class="btn btn-primary" @onclick="OnSubmitLateList">
          @if (_loadingLateListSubmit)
          {
            <span class="spinner-border spinner-border-sm mr-1"></span>
          }
          Submit lists
        </button>
      }
    </EditForm>
  }
</div>
<div class="tab-pane fade pt-4" id="lists-next-season" role="tabpanel" aria-labelledby="lists-next-season-tab">
  @if (!SeasonState.NextSeason.ListSubmissionIsOver && _isTheRightUser || SeasonState.NextSeason.ListSubmissionIsOver && LoggedInUserState.UserIsAdmin)
  {
    <h4>Lists next season</h4>
    @if (_player.SubmitedListsNextSeason)
    {
      <div class="pb-3 mt-3 alert alert-info" role="alert" style="max-width: 25rem">
        You are participating in the next season!
      </div>  
    }
    <div>Lists can be changed until the @SeasonState.NextSeason.ListSubmissionDeadline.ToMyDate() and are not visible to other players</div>
    <EditForm EditContext="@_editContextListsNextSeason">
      @if (!_playerLeagues.Any())
      {
        <div class="mt-3">
          <div class="alert alert-warning" role="alert">
            As a new player, we need you to rank your skill from 1-10 to put you into a league where you have fun. 10 means high skill and 1 low skill. You can also get a better feel by challenging a few players in our discord until the new season starts.
          </div>
          <div class="form-group mt-3">
            <ValidationMessage For="@(() => _editListModelNextSeason.SelfAssessment)"/>
            <select class="form-select form-select-lg mb-3" aria-label=".form-select-lg example" @bind="_editListModelNextSeason.SelfAssessment">
              <option selected value="null">Rate skill</option>
              @foreach (var skill in Enumerable.Range(1, 10).Reverse())
              {
                <option value="@skill">
                  @if (skill == 10)
                  {
                    <span>@skill (high skill)</span>
                  }
                  else if (skill == 1)
                  {
                    <span>@skill (low skill)</span>
                  }
                  else
                  {
                    <span>@skill</span>
                  }
                </option>
              }
            </select>
          </div>
        </div>
      }
      <DataAnnotationsValidator/>
      <div class="row align-items-start">
        <div class="col-xs-12 col-md-12 col-lg-6">
          <hr class="my-3">
          <ValidationMessage For="@(() => _editListModelNextSeason.List1.List)"/>
          <UserListComponent
            List="@(_editListModelNextSeason.List1)"
            IsFreshListPossible="true"
            IsCurrentUser="true"/>
        </div>
        <div class="col-xs-12 col-md-12 col-lg-6">
          <hr class="my-3">
          <ValidationMessage For="@(() => _editListModelNextSeason.List2.List)"/>
          <UserListComponent
            List="@(_editListModelNextSeason.List2)"
            IsFreshListPossible="true"
            IsCurrentUser="true"/>
        </div>
      </div>
      <button disabled="@_loadingListsNextSeason" class="btn btn-primary" @onclick="OnSubmitListNextSeason">
        @if (_loadingListsNextSeason)
        {
          <span class="spinner-border spinner-border-sm mr-1"></span>
        }
        Save lists
      </button>
    </EditForm>
    @if (!string.IsNullOrWhiteSpace(_editListModelNextSeason.List1.List))
    {
      <button disabled="@_loadingListsNextSeason" class="btn btn-outline-danger mt-3" @onclick="OnRetractParticipation">
        @if (_loadingListsNextSeason)
        {
          <span class="spinner-border spinner-border-sm mr-1"></span>
        }
        Withdraw participation from next season
      </button>
    }
  }
</div>
</div>
</div>
</div>

@inject IPlayerRepository PlayerRepository
@inject IMatchupRepository MatchupRepository
@inject IChallengeService ChallengeService
@inject ILeagueRepository LeagueRepository
@inject LoggedInUserState LoggedInUserState
@inject SeasonState SeasonState
@inject NavigationManager Navigation
@inject IGeoLocationService GeoLocationService
@inject IListAcceptAndRejectService AcceptAndRejectService
@inject IListValidationService ListValidationService
@inject IListRepository ListRepository

@code{
  private EditUserModel _editUserModel = new();

  private EditListsModel _editListModel = new()
  {
    List1 = new GameListEditModel(),
    List2 = new GameListEditModel()
  };
  
  private EditListsModel _editListModelNextSeason = new()
  {
    List1 = new GameListEditModel(),
    List2 = new GameListEditModel()
  };

  private List<League> _playerLeagues = new();
  private List<RegionInfo> _countries = new();
  private List<Matchup> _matches = new();
  private List<Matchup> _challenges = new();

  private Player _player = new();
  private bool _loading;
  private bool _loadingListsNextSeason;

  [Parameter]
  public string Id { get; set; }

  private ObjectId _challengeIdFromLoggedInUser;

  private ValidationMessageStore _messageStoreUser;
  private ValidationMessageStore _messageStoreLists;
  private ValidationMessageStore _messageStoreListsNextSeason;
  private EditContext _editContextUser;
  private EditContext _editContextLists;
  private EditContext _editContextListsNextSeason;
  private bool _isTheRightUser;
  private bool _loadingChallengingPlayer;
  private bool _playerIsLateSignup;
  private bool _loadingLateListSubmit;

  protected override void OnInitialized()
  {
    _countries = GeoLocationService.GetCountries();
    _editContextUser = new EditContext(_editUserModel);
    _messageStoreUser = new ValidationMessageStore(_editContextUser);
    _editContextLists = new EditContext(_editListModel);
    _editContextListsNextSeason = new EditContext(_editListModelNextSeason);
    _messageStoreLists = new ValidationMessageStore(_editContextLists);
    _messageStoreListsNextSeason = new ValidationMessageStore(_editContextListsNextSeason);

    _editContextUser.OnValidationRequested += (_, _) => OnSubmit();

    LoggedInUserState.UserLoggedIn += (_, _) => StateHasChanged();
    LoggedInUserState.UserTimeSet += (_, _) => StateHasChanged();
    SeasonState.SeasonsChanged += (_, _) => StateHasChanged();
  }

  public override async Task SetParametersAsync(ParameterView parameters)
  {
    await base.SetParametersAsync(parameters);
    await OnInitializedAsync();
  }

  protected override async Task OnInitializedAsync()
  {
    if (ObjectId.TryParse(Id, out var realId))
    {
      _player = await PlayerRepository.Load(realId);
      if (_player == null)
      {
        Navigation.NavigateTo("notfound");
      }
      else
      {
        _playerLeagues = (await LeagueRepository.LoadLeaguesForPlayer(_player.Id))
          .OrderByDescending(r => r.Season).ToList();

        _challenges = await MatchupRepository.LoadOpenChallengesOfPlayer(_player);
        _matches = await MatchupRepository.LoadMatchesOfPlayer(_player);

        _challengeIdFromLoggedInUser = (await MatchupRepository.LoadChallengeOfPlayers(LoggedInUserState.LoggedInPlayer, _player))?.Id ?? ObjectId.Empty;
        _editUserModel = new EditUserModel
        {
          DiscordTag = _player.DiscordTag,
          DisplayName = _player.DisplayName,
          Country = _player.Location?.Country?.TwoLetterISORegionName ?? Location.NotSelected,
          TimeZone = _player.Location?.TimezoneRaw ?? Location.NotSelected
        };

        _isTheRightUser = Id == LoggedInUserState.LoggedInPlayer.Id.ToString();
        _playerIsLateSignup = _isTheRightUser
                              && _playerLeagues.FirstOrDefault()?.Season == SeasonState.CurrentSeason.SeasonId
                              && !_player.SubmittedLists;

        SetListEditModel();
        SetListNextSeasonEditModel();

        StateHasChanged();
      }
    }
    else
    {
      Navigation.NavigateTo("notfound");
    }
  }

  private void SetListEditModel()
  {
    _editListModel = new EditListsModel
    {
      List1 = ToModel(_player.ArmyCurrentSeason?.List1),
      List2 = ToModel(_player.ArmyCurrentSeason?.List2)
    };
  }
  
  private void SetListNextSeasonEditModel()
  {
    _editListModelNextSeason = new EditListsModel
    {
      SelfAssessment = _player.SelfAssessment,
      List1 = ToModel(_player.ArmyNextSeason?.List1),
      List2 = ToModel(_player.ArmyNextSeason?.List2)
    };
  }
  
  private string GetOriginalPointsString(MatchResult result)
  {
    return result.Player1.Id == _player.Id 
      ? $"{result.Player1.VictoryPoints} {GetSecondaryStringForPlayer1(result.SecondaryObjective)} : {result.Player2.VictoryPoints} {GetSecondaryStringForPlayer2(result.SecondaryObjective)}" 
      : $"{result.Player2.VictoryPoints} {GetSecondaryStringForPlayer2(result.SecondaryObjective)} : {result.Player1.VictoryPoints} {GetSecondaryStringForPlayer1(result.SecondaryObjective)}";
  }
  
  private string GetSecondaryStringForPlayer1(SecondaryObjectiveState resultSecondaryObjective)
  {
    return resultSecondaryObjective == SecondaryObjectiveState.Player1 ? "(+2nd obj.)" : "";
  }
  
  private string GetSecondaryStringForPlayer2(SecondaryObjectiveState resultSecondaryObjective)
  {
    return resultSecondaryObjective == SecondaryObjectiveState.Player2 ? "(+2nd obj.)" : "";
  }

  private static GameListEditModel ToModel(GameList list)
  {
    return new GameListEditModel
    {
      Faction = list?.Faction ?? 0,
      List = list?.List,
      ProposedListChange = list?.ProposedListChange,
      Name = list?.Name
    };
  }

  private async Task OnRetractParticipation()
  {
    _loadingListsNextSeason = true;

    await ListRepository.Delete(_player.ArmyIdNextSeason);
    _player.RetractParticipationNextSeason();
    await PlayerRepository.UpdateWithLists(_player);
    _editListModelNextSeason = new EditListsModel
    {
      List1 = new GameListEditModel(),
      List2 = new GameListEditModel()
    };
    
    _loadingListsNextSeason = false;
  }

  private async Task OnSubmitListNextSeason()
  {
    _loadingListsNextSeason = true;
    await ValidateListEdit(_messageStoreListsNextSeason, _editListModelNextSeason);
    
    if (!_editContextListsNextSeason.Validate())
    {
      _loadingListsNextSeason = false;
      return;
    }

    if (_editListModel.List1.Name == _editListModel.List2.Name)
    {
      _editListModelNextSeason.List1.Name += "_1";
      _editListModelNextSeason.List2.Name += "_2";
    }
    
    var list1 = GameList.Create(_editListModelNextSeason.List1.Name, _editListModelNextSeason.List1.List, _editListModelNextSeason.List1.Faction);
    var list2 = GameList.Create(_editListModelNextSeason.List2.Name, _editListModelNextSeason.List2.List, _editListModelNextSeason.List2.Faction);

    _player.SubmitListsNextSeason(list1, list2, SeasonState.CurrentSeason.SeasonId, _editListModelNextSeason.SelfAssessment);
    await PlayerRepository.UpdateWithLists(_player);
    
    _loadingListsNextSeason = false;
  }
  
  private async Task ValidateListEdit(ValidationMessageStore messageStoreLists, EditListsModel editListModel)
  {
    messageStoreLists.Clear();
    if (string.IsNullOrEmpty(editListModel.List1.Name)) messageStoreLists.Add(() => editListModel.List1.Name, Errors.FieldRequired);
    if (string.IsNullOrEmpty(editListModel.List2.Name)) messageStoreLists.Add(() => editListModel.List2.Name, Errors.FieldRequired);
    if (string.IsNullOrEmpty(editListModel.List1.List)) messageStoreLists.Add(() => editListModel.List1.List, Errors.FieldRequired);
    if (string.IsNullOrEmpty(editListModel.List2.List)) messageStoreLists.Add(() => editListModel.List2.List, Errors.FieldRequired);
    if (editListModel.List1.Faction == default) messageStoreLists.Add(() => editListModel.List1.Faction, Errors.FactionRequired);
    if (editListModel.List2.Faction == default) messageStoreLists.Add(() => editListModel.List2.Faction, Errors.FactionRequired);

    await AddListErrors(editListModel.List1.List, FieldIdentifier.Create(() => editListModel.List1.List));
    await AddListErrors(editListModel.List2.List, FieldIdentifier.Create(() => editListModel.List2.List));
  }

  private async Task AddListErrors(string list, FieldIdentifier errorField)
  {
    var validationErrors1 = await ListValidationService.Validate(list);
    if (validationErrors1.Any())
    {
      foreach (var error in validationErrors1)
      {
        _messageStoreLists.Add(errorField, error);
      }
    }
  }

  private async void OnSubmit()
  {
    _loading = true;
    _messageStoreUser.Clear();
    var regex = new Regex("^.{3,32}#[0-9]{4}$");
    var isValid = true;
    if (!string.IsNullOrWhiteSpace(_editUserModel.DiscordTag) && !regex.Match(_editUserModel.DiscordTag).Success)
    {
      _messageStoreUser.Add(() => _editUserModel.DiscordTag, "Discord tag has to of the form example#1234");
      isValid = false;
    }

    if (_editUserModel.DisplayName.Length < 3 || _editUserModel.DisplayName.Length > 30)
    {
      _messageStoreUser.Add(() => _editUserModel.DisplayName, "Displayname hast to be between 3 and 30 characters");
      isValid = false;
    }

    if (!isValid)
    {
      _loading = false;
      return;
    }
    _player.Update(_editUserModel);
    await PlayerRepository.Update(_player);
    _loading = false;
    StateHasChanged();
  }

  private void NavigateToLeague(ObjectId leagueId)
  {
    Navigation.NavigateTo($"league/{leagueId}");
  }

  private int GetRank(League league)
  {
    return (league.Players
      .Select((value, index) => new {value, index})
      .SingleOrDefault(x => x.value.Id == new ObjectId(Id))
      ?.index ?? 0) + 1;
  }

  private bool UserParticipatesInCurrentSeason
  {
    get
    {
      if (!_playerLeagues.Any()) return false;
      return _playerLeagues[0].Season == SeasonState.CurrentSeason.SeasonId;
    }
  }

  private async Task RequestListChange1()
  {
    _messageStoreLists.Clear();
    await AddListErrors(_editListModel.List1.List, FieldIdentifier.Create(() => _editListModel.List1.List));

    if (!_editContextLists.Validate())
    {
      return;
    }

    await AcceptAndRejectService.RequestList1(_player.ArmyCurrentSeason, _editListModel.List1.ProposedListChange);
    SetListEditModel();
  }


  private async Task RequestListChange2()
  {
    _messageStoreLists.Clear();
    await AddListErrors(_editListModel.List2.List, FieldIdentifier.Create(() => _editListModel.List2.List));

    if (!_editContextLists.Validate())
    {
      return;
    }

    await AcceptAndRejectService.RequestList2(_player.ArmyCurrentSeason, _editListModel.List2.ProposedListChange);
    SetListEditModel();
  }

  private async Task DeleteListChange1()
  {
    await AcceptAndRejectService.RejectList1(_player.ArmyCurrentSeason, "", false);
    SetListEditModel();
  }

  private async Task DeleteListChange2()
  {
    await AcceptAndRejectService.RejectList2(_player.ArmyCurrentSeason, "", false);
    SetListEditModel();
  }

  private async Task ChallengePlayer()
  {
    _loadingChallengingPlayer = true;
    var newId = await ChallengeService.ChallengePlayer(LoggedInUserState.LoggedInPlayer, _player);
    Navigation.NavigateTo($"/match/{newId}");
    _loadingChallengingPlayer = false;
  }

  private async Task NavigateToMatch(Matchup match)
  {
    if (match.IsChallenge)
    {
      Navigation.NavigateTo($"match/{match.Id}");
    }
    else if (match.IsPlayoff)
    {
      Navigation.NavigateTo($"match/{match.Id}?playoffSeason={SeasonState.CurrentSeason.SeasonId}");
    }
    else
    {
      var leagueOfMatch = _playerLeagues.FirstOrDefault(l => l.GameDays.SelectMany(p => p.MatchupIds).Contains(match.Id));
      if (leagueOfMatch == null)
      {
        var leagues = await LeagueRepository.LoadForSeason(SeasonState.CurrentSeason.SeasonId);
        var foreignLeague = leagues.Single(l => l.GameDays.Any(g => g.Matchups.Any(m => m.Id == match.Id)));
        Navigation.NavigateTo($"match/{match.Id}?leagueId={foreignLeague.Id}");
      }
      else
      {
        Navigation.NavigateTo($"match/{match.Id}?leagueId={leagueOfMatch.Id}");
      }
    }
  }

  private string WonMatch(Matchup matchup)
  {
    if (matchup.Result.IsDraw)
    {
      return "draw";
    }

    return matchup.Result.Winner == _player.Id ? "won" : "lost";
  }

  private string GetBattlePointString(MatchResult result)
  {
    return result.Player1.Id == _player.Id
      ? $"{result.Player1.BattlePoints} : {result.Player2.BattlePoints}"
      : $"{result.Player2.BattlePoints} : {result.Player1.BattlePoints}";
  }
  
  private string GetMmrDiff(MatchResult result)
  {
    if (result.Player1.OldMmr == null) return "na";
    var newMmrRating = result.Player1.Id == _player.Id
      ? (int) (result.Player1.NewMmr.Rating - result.Player1.OldMmr.Rating)
      : (int) (result.Player2.NewMmr.Rating - result.Player2.OldMmr.Rating);
    if (newMmrRating > 0)
    {
      return $"+{newMmrRating}";
    }
    return $"{newMmrRating}";
  }

  private string GetRaceStrings(MatchResult result)
  {
    if (result?.Player1List == null || result.Player2List == null) return null;
    return result.Player1.Id == _player.Id
      ? $"{result.Player1List.Faction.ToCamelCaseString()} vs {result.Player2List.Faction.ToCamelCaseString()}"
      : $"{result.Player2List.Faction.ToCamelCaseString()} vs {result.Player1List.Faction.ToCamelCaseString()}";
  }

  private string GetOpponent(Matchup matchup)
  {
    return matchup.Player1 == _player.Id
      ? $"{matchup.Player2Name}"
      : $"{matchup.Player1Name}";
  }

  private void GoToChallenge()
  {
    Navigation.NavigateTo($"match/{_challengeIdFromLoggedInUser}");
  }

  private async Task OnSubmitLateList()
  {
    _loadingLateListSubmit = true;
    await ValidateListEdit(_messageStoreLists, _editListModel);
    
    if (!_editContextLists.Validate())
    {
      _loadingLateListSubmit = false;
      return;
    }
    
    if (_editListModel.List1.Name == _editListModel.List2.Name)
    {
      _editListModel.List1.Name += "_1";
      _editListModel.List2.Name += "_2";
    }
    _player.SubmitLateList(
      GameList.Create(_editListModel.List1.Name, _editListModel.List1.List, _editListModel.List1.Faction)
      , GameList.Create(_editListModel.List2.Name, _editListModel.List2.List, _editListModel.List2.Faction)
      , SeasonState.CurrentSeason.SeasonId);
    await PlayerRepository.UpdateWithLists(_player);
    _loadingLateListSubmit = false;
  }
}