@page "/player/{Id}"
@using Microsoft.AspNetCore.Components
@using FadingFlame.Players
@using MongoDB.Bson

@inject IPlayerRepository _playerRepository
@inject UserState _userState
@inject NavigationManager _navigation

<div class="card">
    <h4 class="card-header">Profile @_model.DisplayName</h4>
    <div class="card-body">
        @if (IsTheRightUser())
        {
            <EditForm Model="@_model" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator/>
                <div class="form-group">
                    <div class="pb-2">Discord Tag: </div>
                    <InputText @bind-Value="_model.DiscordTag" class="form-control mb-3"/>
                    <ValidationMessage For="@(() => _model.DiscordTag)"/>
                </div>
                <button disabled="@_loading" class="btn btn-primary">
                    @if (_loading)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Save profile
                </button>
            </EditForm>
            
            <hr class="my-3">
            
            @if (!_listSubmitted)
            {
                <div class="pt-3 pb-3 alert alert-warning text-center" role="alert">
                    To participate in the next season, submit your lists here. This can not be undone once you submitted the lists.
                </div>
                <EditForm Model="@_listModel" OnValidSubmit="OnValidSubmitList">
                <DataAnnotationsValidator/>
                <div class="row align-items-start">
                    <div class="col">
                        <div class="form-group">
                            <div class="pb-3">First List: </div>
                            <InputText @bind-Value="_listModel.List1Name" placeholder="Name" class="form-control mb-3"/>
                            <ValidationMessage For="@(() => _listModel.List1Name)"/>
                        </div>
                        <div class="form-group">
                            <select class="form-select form-select-lg mb-3" aria-label=".form-select-lg example" @bind="_listModel.Faction1">
                                <option selected value="0">Select faction</option>
                                @foreach (var faction in Enum.GetValues<Faction>())
                                {
                                    <option value="@faction">@faction.ToFactionString()</option>
                                }
                            </select>
                            <ValidationMessage For="@(() => _listModel.Faction1)"/>
                        </div>
                        <div class="form-group">
                            <InputTextArea @bind-Value="_listModel.List1" placeholder="List" class="form-control mb-3" style="min-height: 300px"/>
                            <ValidationMessage For="@(() => _listModel.List1)"/>
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-group">
                            <div class="pb-3">Second List: </div>
                            <InputText @bind-Value="_listModel.List2Name" placeholder="Name" class="form-control mb-3"/>
                            <ValidationMessage For="@(() => _listModel.List2Name)"/>
                        </div>
                        <div class="form-group">
                            <select class="form-select form-select-lg mb-3" aria-label=".form-select-lg example" @bind="_listModel.Faction2">
                                <option selected value="0">Select faction</option>
                                @foreach (var faction in Enum.GetValues<Faction>())
                                {
                                    <option value="@faction">@faction.ToFactionString()</option>
                                }
                            </select>
                            <ValidationMessage For="@(() => _listModel.Faction2)"/>
                        </div>
                        <div class="form-group">
                            <InputTextArea @bind-Value="_listModel.List2" placeholder="List" class="form-control mb-3" style="min-height: 300px"/>
                            <ValidationMessage For="@(() => _listModel.List2)"/>
                        </div>
                    </div>
                </div>
                
                <button disabled="@_loadingLists" class="btn btn-primary">
                    @if (_loadingLists)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Submit final lists
                </button>
                </EditForm>
            }
        }
        else
        {
            <div class="form-group pb-3">
                <label>Discord Tag: </label>
                <span>@_model.DiscordTag</span>
            </div>
        }
        @if (_listSubmitted)
        {
            <div class="row align-items-start">
                <div class="col">
                    <div class="form-group">
                        <div>Faction: </div>
                        <div class="pb-3"><b>@_listModel.Faction1.ToFactionString()</b></div>
                    </div>
                    <div class="form-group">
                        <div>Faction: </div>
                        <div class="pb-3"><b>@_listModel.Faction2.ToFactionString()</b></div>
                    </div>
                </div>
            </div>
            <div class="row align-items-start">
                <div class="col">
                    <div class="form-group">
                        <label>First List: </label>
                        <div><b>@_listModel.List1Name</b></div>
                    </div>
                    <hr class="my-3">
                    <div class="form-group">
                        <div style="white-space:pre-wrap;">@_listModel.List1</div>
                    </div>
                </div>
                <div class="col">
                    <div class="form-group">
                        <label>Second List: </label>
                        <div><b>@_listModel.List2Name</b></div>
                    </div>
                    <hr class="my-3">
                    <div class="form-group">
                        <div style="white-space:pre-wrap;">@_listModel.List2</div>
                    </div>
                </div>
            </div>
            if (_userState.UserIsAdmin)
            {
                <button disabled="@_loadingLists" class="btn btn-danger mt-3" @onclick="() => DeleteLists()">
                    @if (_loadingLists)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    <span class="oi oi-shield" aria-hidden="true"></span> Delete lists for user
                </button>
            }
        }

    </div>
</div>

@code{
    private EditUserModel _model = new();
    private EditListsModel _listModel = new();
    private bool _loading;
    private bool _loadingLists;
    private bool _listSubmitted;

    [ParameterAttribute]
    public string Id { get; set; }

    protected override void OnInitialized()
    {
        _userState.UserLoggedIn += (_, _) => StateHasChanged();
    }
    
    protected override async Task OnInitializedAsync()
    {
        if (ObjectId.TryParse(Id, out var realId))
        {
            var player = await _playerRepository.Load(realId);
            if (player == null)
            {
                _navigation.NavigateTo("notfound");
            }
            else
            {
                _model = new EditUserModel
                {
                    DiscordTag = player.DiscordTag,
                    DisplayName = player.DisplayName
                };

                _listModel = new EditListsModel
                {
                    List1 = player.Army?.List1.List,
                    List2 = player.Army?.List2.List,
                    List1Name = player.Army?.List1.Name,
                    List2Name = player.Army?.List2.Name,
                    Faction1 = player.Army?.List1.Faction ?? 0,
                    Faction2 = player.Army?.List2.Faction ?? 0
                };

                if (_listModel.List1 != null
                    && _listModel.List2 != null
                    && _listModel.List1Name != null
                    && _listModel.List2Name != null)
                {
                    _listSubmitted = true;
                }
                
                StateHasChanged();
            }
        }
        else
        {
            _navigation.NavigateTo("notfound");
        }
    }

    private async Task OnValidSubmitList()
    {
        if (IsTheRightUser())
        {
            _loadingLists = true;
            var player = await _playerRepository.Load(new ObjectId(Id));
            if (_listModel.List1Name == _listModel.List2Name)
            {
                _listModel.List1Name += "_1";
                _listModel.List2Name += "_2";
            }

            var list1 = GameList.Create(_listModel.List1Name, _listModel.List1, _listModel.Faction1);
            var list2 = GameList.Create(_listModel.List2Name, _listModel.List2, _listModel.Faction2);
            player.SubmitLists(list1, list2);
            await _playerRepository.Update(player);

            _loadingLists = false;
            _listSubmitted = true;
        }
    }
    
    private async Task OnValidSubmit()
    {
        if (IsTheRightUser())
        {
            _loading = true;
            var player = await _playerRepository.Load(new ObjectId(Id));
            player.DiscordTag = _model.DiscordTag;
            await _playerRepository.Update(player);
            _userState.SetUserData(player.Id);
            _loading = false;
        }
    }

    private bool IsTheRightUser()
    {
        return _userState.LoggedInPlayerId?.ToString() == Id;
    }

    private async Task DeleteLists()
    {
        if (_userState.UserIsAdmin)
        {
            _loadingLists = true;
            var player = await _playerRepository.Load(new ObjectId(Id));
            player.ResetLists();
            _listModel.List1 = null;
            _listModel.List2 = null;
            _listModel.List1Name = null;
            _listModel.List2Name = null;
            _listModel.Faction1 = 0;
            _listModel.Faction2 = 0;
            _listSubmitted = false;
            await _playerRepository.Update(player);
            _loadingLists = false;
        }
    }
}