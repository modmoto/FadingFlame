@page "/player/{Id}"
@using Microsoft.AspNetCore.Components
@using FadingFlame.Players
@using MongoDB.Bson
@using FadingFlame.Leagues
@using System.Text.RegularExpressions
@using FadingFlame.Admin
@using System.Globalization

<div class="card">
    <h4 class="card-header">Profile @_player.DisplayName 
        @if (_editUserModel.Country != null)
        {
            <span class="@_regionCss"></span>
        }
    </h4>
    <div class="card-body">
        @if (_editUserModel.TimeZone != Location.NotSelected && !_isTheRightUser)
        {
            <div class="form-group pb-3">
                <label>Time difference to you: @(_geoLocationService.GetTimeDiff(_userState.CurrentUserTime, _editUserModel.TimeZone).Hours)h (@_editUserModel.TimeZone)</label>
            </div>
        }
        @if (UserParticipatesInCurrentSeason())
        {
            <div class="pt-3 pb-3 alert alert-success" role="alert" style="max-width: 25rem">
                <div class="cursor" @onclick="() => NavigateToLeague(_playerLeagues[0].Id)">Current league: @_playerLeagues[0].DivisionId @_playerLeagues[0].Name</div>
            </div>
        }
        @if (_isTheRightUser)
        {
            <EditForm OnSubmit="OnSubmit" EditContext="@_editContextUser">
                <DataAnnotationsValidator/>
                <div class="form-group">
                    <div class="pb-2">Display name: </div>
                    <InputText @bind-Value="_editUserModel.DisplayName" class="form-control mb-3"/>
                    <ValidationMessage For="@(() => _editUserModel.DisplayName)"/>
                </div>
                <DataAnnotationsValidator/>
                <div class="form-group">
                    <div class="pb-2">Discord tag: </div>
                    <InputText @bind-Value="_editUserModel.DiscordTag" class="form-control mb-3"/>
                    <ValidationMessage For="@(() => _editUserModel.DiscordTag)"/>
                </div>
                <div class="row">
                    <div class="form-group col">
                        <div class="pb-2">Country: </div>
                        <div class="form-group">
                            <select class="form-select form-select-lg mb-3" aria-label=".form-select-lg example" @bind="_editUserModel.Country">
                                <option selected value="@Location.NotSelected">Dont show country</option>
                                @foreach (var culture in _countries)
                                {
                                    <option value="@culture.TwoLetterISORegionName">@culture.EnglishName</option>
                                }
                            </select>
                            <ValidationMessage For="@(() => _editUserModel.Country)"/>
                        </div>
                    </div>    
                    <div class="form-group col">
                        <div class="pb-2">Timezone: </div>
                        <select class="form-select form-select-lg mb-3" aria-label=".form-select-lg example" @bind="_editUserModel.TimeZone">
                            <option selected value="@Location.NotSelected">Dont show timezone</option>
                            @foreach (var timeZone in _geoLocationService.GetTimeZones())
                            {
                                <option value="@timeZone.Id">@timeZone.Id @(timeZone.BaseUtcOffset)</option>
                            }
                        </select>
                        <ValidationMessage For="@(() => _editUserModel.TimeZone)"/>
                    </div>
                </div>
                
                <button disabled="@_loading" class="btn btn-primary">
                    @if (_loading)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Save profile
                </button>
            </EditForm>

            <hr class="my-3">

            @if (!_seasonState.CurrentSeason.ListSubmissionIsOver)
            {
                @if (!_player.SubmittedLists)
                {
                    <div class="pt-3 pb-3 alert alert-warning text-center" role="alert">
                        To participate in the next season, submit your lists here. The lists can not be changed after @_seasonState.CurrentSeason.ListSubmissionDeadline.ToMyDate() and are not visible to other players until then.
                    </div>
                }
                else
                {
                    <div class="pt-3 pb-3 alert alert-success text-center" role="alert">
                        Lists submitted, you will participate in the next season. You can still change the lists until @_seasonState.CurrentSeason.ListSubmissionDeadline.ToMyDate() and they are not visible to other players until then.
                    </div>
                }
            }
        }
        else
        {
            <div class="form-group pb-3">
                <label>Discord Tag: </label>
                <span>@_editUserModel.DiscordTag</span>
            </div>
        }
        @if (_player.SubmittedLists)
        {
            <h4>Lists this season</h4>
            <hr class="my-3">
            <EditForm OnValidSubmit="OnValidSubmitList" Model="@_editListModel">
            <DataAnnotationsValidator/>
            <div class="row align-items-start">
                <div class="col">
                    <UserListComponent 
                        List="@(_editListModel.List1)" 
                        ShowEdit="@(!_seasonState.CurrentSeason.ListSubmissionIsOver && _isTheRightUser || _userState.UserIsAdmin)" 
                        IsCurrentUser="_isTheRightUser"
                        OnRequestListChange="RequestListChange1"
                        />
                </div>
                <div class="col">
                    <UserListComponent 
                        List="@(_editListModel.List2)" 
                        ShowEdit="@(!_seasonState.CurrentSeason.ListSubmissionIsOver && _isTheRightUser || _userState.UserIsAdmin)" 
                        IsCurrentUser="_isTheRightUser"
                        OnRequestListChange="RequestListChange2"
                        />    
                </div>
            </div>
            @if (!_seasonState.CurrentSeason.ListSubmissionIsOver)
            {
                <button disabled="@_loadingLists" class="btn btn-primary">
                    @if (_loadingLists)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Save lists
                </button>
            }
            else
            {
                if (!_isTheRightUser)
                {
                    <div>User is participating in the next season, lists will be displayed after @_seasonState.CurrentSeason.ListSubmissionDeadline.ToMyDate()</div>
                }       
            }
            
            </EditForm>
        }

        <h4 class="mt-4">Participated in Seasons</h4>
        @foreach (var league in _playerLeagues)
        {
            <div class="cursor" @onclick="() => NavigateToLeague(league.Id)">Season @league.Season, Division @league.DivisionId, Rank @GetRank(league)</div>
        }
    </div>
</div>

@inject IPlayerRepository _playerRepository
@inject ILeagueRepository _leagueRepository
@inject UserState _userState
@inject SeasonState _seasonState
@inject NavigationManager _navigation
@inject IGeoLocationService _geoLocationService

@code{
    private EditUserModel _editUserModel = new();
    private EditListsModel _editListModel = new()
    {
        List1 = new(),
        List2 = new()
    };
    private List<League> _playerLeagues = new();
    private List<RegionInfo> _countries = new();
    private Player _player = new();
    private bool _loading;
    private bool _loadingLists;

    [Parameter]
    public string Id { get; set; }

    private ValidationMessageStore _messageStore;
    private EditContext _editContextUser;
    private string _regionCss;
    private bool _isTheRightUser;

    protected override void OnInitialized()
    {
        _countries = _geoLocationService.GetCountries();
        _editContextUser = new EditContext(_editUserModel);
        _messageStore = new ValidationMessageStore(_editContextUser);
        _editContextUser.OnValidationRequested += (_, _) => OnSubmit();

        _userState.UserLoggedIn += (_, _) => StateHasChanged();
        _userState.UserTimeSet += (_, _) => StateHasChanged();
        _seasonState.SeasonsChanged += (_, _) => StateHasChanged();
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        if (ObjectId.TryParse(Id, out var realId))
        {
            _player = await _playerRepository.Load(realId);
            if (_player == null)
            {
                _navigation.NavigateTo("notfound");
            }
            else
            {
                _playerLeagues = (await _leagueRepository.LoadLeaguesForPlayer(_player.Id))
                    .OrderByDescending(r => r.Season).ToList();
                _editUserModel = new EditUserModel
                {
                    DiscordTag = _player.DiscordTag,
                    DisplayName = _player.DisplayName,
                    Country = _player.Location?.Country?.TwoLetterISORegionName ?? Location.NotSelected,
                    TimeZone = _player.Location?.TimezoneRaw ?? Location.NotSelected
                };

                _regionCss = SetRegionCss();
                _isTheRightUser = Id == _userState.LoggedInPlayer.Id.ToString();
                _editListModel = new EditListsModel
                {
                    List1 = ToModel(_player.Army?.List1),
                    List2 = ToModel(_player.Army?.List2)
                };
                
                StateHasChanged();
            }
        }
        else
        {
            _navigation.NavigateTo("notfound");
        }
    }

    private static GameListEditModel ToModel(GameList list)
    {
        return new GameListEditModel
        {
            Faction = list.Faction,
            List = list.List,
            ProposedListChange = list.ProposedListChange,
            Name = list.Name,
        };
    }

    private string SetRegionCss()
    {
        return $"ms-2 flag-container flag-icon flag-icon-{_editUserModel.Country?.ToLower()}";
    }

    private async Task OnValidSubmitList()
    {
        if (!_player.SubmittedLists)
        {
            _loadingLists = true;
            if (_editListModel.List1.Name == _editListModel.List2.Name)
            {
                _editListModel.List1.Name += "_1";
                _editListModel.List2.Name += "_2";
            }

            var list1 = GameList.Create(_editListModel.List1.Name, _editListModel.List1.List, _editListModel.List1.Faction);
            var list2 = GameList.Create(_editListModel.List2.Name, _editListModel.List2.List, _editListModel.List2.Faction);
            _player.SubmitLists(list1, list2);
            await _playerRepository.Update(_player);

            _loadingLists = false;
        }
    }
    
    private async void OnSubmit()
    {
        _loading = true;
        _messageStore.Clear();
        var regex = new Regex("^.{3,32}#[0-9]{4}$");
        var isValid = true;
        if (!regex.Match(_editUserModel.DiscordTag).Success)
        {
            _messageStore.Add(() => _editUserModel.DiscordTag, "Discord tag has to of the form example#1234");
            isValid = false;
        }
        
        if (_editUserModel.DisplayName.Length < 3 || _editUserModel.DisplayName.Length > 30)
        {
            _messageStore.Add(() => _editUserModel.DisplayName, "Displayname hast to be between 3 and 30 characters");
            isValid = false;
        }

        if (!isValid)
        {
            _loading = false;
            return;
        }
        _player.Update(_editUserModel);
        SetRegionCss();
        await _playerRepository.Update(_player);
        _loading = false;
        StateHasChanged();
    }

    private void NavigateToLeague(ObjectId leagueId)
    {
        _navigation.NavigateTo($"league/{leagueId}");
    }

    private int GetRank(League league)
    {
        return league.Players
            .Select((value, index) => new { value, index })
            .SingleOrDefault(x => x.value.Id == new ObjectId(Id))
            ?.index ?? 0 + 1;
    }

    private bool UserParticipatesInCurrentSeason()
    {
        if (!_playerLeagues.Any()) return false;
        return _playerLeagues[0].Season == _seasonState.CurrentSeason.SeasonId;
    }

    private async void RequestListChange1()
    {
        _player.Army.List1.ProposeListChange(_editListModel.List1.ProposedListChange);
        await _playerRepository.Update(_player);
    }
    
    private async void RequestListChange2()
    {
        _player.Army.List2.ProposeListChange(_editListModel.List2.ProposedListChange);
        await _playerRepository.Update(_player);
    }
}