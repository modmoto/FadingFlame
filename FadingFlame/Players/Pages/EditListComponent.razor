@using FadingFlame.Lists
@if (EditProposedListChange)
{
    <div class="form-group">
        <label>Name: </label>
        <div><b>@List.Name</b></div>
    </div>
    <div class="form-group">
        <div>Faction: </div>
        <div class="pb-3"><b>@List.Faction.ToCamelCaseString()</b></div>
    </div>
    <hr class="my-3">
    <div class="form-group">
        <ValidationMessage For="@(() => List.ProposedListChange)"/>
        <InputTextArea @bind-Value="List.ProposedListChange" placeholder="Propose list change" class="form-control mb-3" style="min-height: 300px"/>
    </div>
}
else
{
    <div class="form-group">
        <div class="pb-3">List: </div>
        <ValidationMessage For="@(() => List.Name)"/>
        <InputText @bind-Value="List.Name" placeholder="Name" class="form-control mb-3"/>
    </div>
    <div class="form-group">
        <ValidationMessage For="@(() => List.Faction)"/>
        <select class="form-select form-select-lg mb-3" aria-label=".form-select-lg example" @bind="List.Faction">
            <option selected value="0">Select faction</option>
            @foreach (var faction in Enum.GetValues<Faction>())
            {
                <option value="@faction">@faction.ToCamelCaseString()</option>
            }
        </select>
    </div>
    <div class="form-group">
        <ValidationMessage For="@(() => List.List)"/>
        <InputTextArea @bind-Value="List.List" placeholder="List" class="form-control mb-3" style="min-height: 300px"/>
    </div> 
}

@code {
    [Parameter]
    public GameListEditModel List { get; set; }
    [Parameter]
    public bool EditProposedListChange { get; set; }
}