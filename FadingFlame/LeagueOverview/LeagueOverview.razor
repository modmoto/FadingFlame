@page "/"
@using FadingFlame.Admin
@using FadingFlame.Leagues
@using FadingFlame.Matchups
@using FadingFlame.Players
@using MongoDB.Bson

<div>
    <h1>Welcome to the Fading Flame League!</h1>
    <hr class="my-4">
    @if (_seasonState.NextSeason.IsPubliclyVisible)
    {
        <p class="lead">The next season starts on @_seasonState.NextSeason.StartDate.ToMyDate() and list submission will end on the @_seasonState.NextSeason.ListSubmissionDeadline.ToMyDate()!</p>
    }
    else
    {
        <p class="lead">The current season started on @_seasonState.CurrentSeason.StartDate.ToMyDate() The next season is not open for registration yet</p>
    }
    <hr class="my-4">    
</div>

@if (_loading)
{
    <div>
        Loading...
    </div>
}
else
{
    @if (!_loggedInUserState.LoadingPlayer && !_loggedInUserState.LoggedInPlayer.SubmitedListsNextSeason && _seasonState.NextSeason.IsPubliclyVisible)
    {
        <div class="pt-3 pb-3 alert alert-warning text-center" role="alert">
            List submission for next season is open, to participate in the next season make sure to do that in your profile!
        </div>
    }
    <div class="row">
        @if (_upcomingGame != null)
        {
            <div class="col mx-2 pt-3 pb-3 alert alert-info text-center cursor" role="alert" @onclick="@(() => _navigation.NavigateTo($"match/{_upcomingGame.Id}?leagueId={_leagueIdForUpcomingDay}"))">
                Upcoming game against @_upcomingOpponenName
            </div>
        }
        @if (_upcomingChallenge != null)
        {
            <div class="col mx-2 pt-3 pb-3 alert alert-info text-center cursor" role="alert" @onclick="@(() => _navigation.NavigateTo($"match/{_upcomingChallenge.Id}"))">
                Upcoming challenge against @_upcomingChallengeName
            </div>
        }
    </div>
    <div class="row row-cols-auto justify-content-around">
        @foreach (var league in _leagues)
        {
            <div class="col mb-4 cursor" @onclick="() => GoToLeague(league.Id)">
                <div class="card" style="width: 18rem;">
                    <div class="card-header">
                        @league.DivisionId @league.Name
                    </div>
                    <div class="card-body">
                        <span class="oi oi-star" aria-hidden="true"></span><span class="card-title mx-2">@GetName(league.Players.First().Id)</span>
                    </div>
                </div>
            </div>
        }
    </div>
}


@inject IPlayerRepository _playerRepository
@inject ILeagueRepository _leagueRepository
@inject NavigationManager _navigation
@inject SeasonState _seasonState
@inject LoggedInUserState _loggedInUserState
@inject IMatchupRepository _matchupRepository

@code
{
    private List<League> _leagues = new();
    private bool _loading;
    private List<Player> _playersInLeague = new();
    private Matchup _upcomingGame;
    private Matchup _upcomingChallenge;
    private ObjectId _leagueIdForUpcomingDay;
    private string _upcomingOpponenName;
    private string _upcomingChallengeName;

    protected override void OnInitialized()
    {
        _seasonState.SeasonsChanged += LoadStuff;
        _loggedInUserState.UserLoggedIn += (_, _) => StateHasChanged();
    }

    private async void LoadStuff(object sender, EventArgs e)
    {
        await OnInitializedAsync();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _leagues = await _leagueRepository.LoadForSeason(_seasonState.CurrentSeason.SeasonId);
        _playersInLeague = await _playerRepository.LoadForLeague(_leagues.SelectMany(l => l.Players).Select(p => p.Id).ToList(), _seasonState.CurrentSeason.SeasonId);
        if (_loggedInUserState.UserIsLoggedIn)
        {
            var playerId = _loggedInUserState.LoggedInPlayer.Id;
            var loadLeaguesForPlayer = await _leagueRepository.LoadLeagueForPlayerInSeason(playerId, _seasonState.CurrentSeason.SeasonId);
            if (loadLeaguesForPlayer != null && _playersInLeague.Any())
            {
                _leagueIdForUpcomingDay = loadLeaguesForPlayer.Id;
                _upcomingGame = loadLeaguesForPlayer.GameDays
                    .Select(g => g.Matchups.FirstOrDefault(m => (m.Player1 == playerId || m.Player2 == playerId) && !m.IsFinished))
                    .FirstOrDefault();
                if (_upcomingGame != null)
                {
                    _upcomingOpponenName = await LoadOpponentName(_upcomingGame, playerId);
                }

                var challenges = await _matchupRepository.LoadOpenChallengesOfPlayer(_loggedInUserState.LoggedInPlayer);
                _upcomingChallenge = challenges.FirstOrDefault();
                if (_upcomingChallenge != null)
                {
                    _upcomingChallengeName = await LoadOpponentName(_upcomingChallenge, playerId);    
                }
            }
        }
        _loading = false;
        StateHasChanged();
    }

    private async Task<string> LoadOpponentName(Matchup matchup, ObjectId loggedInplayer)
    {
        var player = matchup.Player1 == loggedInplayer
            ? await _playerRepository.Load(matchup.Player2)
            : await _playerRepository.Load(matchup.Player1);
        return $"{player?.DisplayName} / {player?.DiscordTag}";
    }

    private string GetName(ObjectId playerId)
    {
        return _playersInLeague.FirstOrDefault(p => p.Id == playerId)?.DisplayName;
    }

    public void GoToLeague(ObjectId leagueId)
    {
        _navigation.NavigateTo($"league/{leagueId}");
    }
}