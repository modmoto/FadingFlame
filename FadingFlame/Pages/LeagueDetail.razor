@page "/league/{leagueId?}"
@using MongoDB.Bson
@using FadingFlame.Leagues

@inject NavigationManager _navigation

@if (_league == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div>
        <h1 class="display-4">@_league.DivisionId @_league.Name</h1>
        <hr class="my-4">
    </div>
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Points</th>
            <th>Matches</th>
        </tr>
        </thead>
        <tbody class="league">
        @foreach (var playerInLeague in _league.Players)
        {
            <tr>
                <td @onclick="() => GoToPlayer(playerInLeague.Id)" class="cursor" >@playerInLeague.Name</td>
                <td>@playerInLeague.Points</td>
                <td>@playerInLeague.GamesCount</td>
            </tr>
        }
        </tbody>
    </table>
    
    <div>
        <h1 class="display-4">Gamedays</h1>
        <hr class="my-4">
    </div>
    
    <ul class="nav nav-pills mb-3" id="pills-tab" role="tablist">
        @foreach (var gameDay in _league.GameDays.Select((value, index) => new { value, index }))
        {
            <li class="nav-item" role="presentation">
                @if (ActiveDay == gameDay.index)
                {
                    <button
                        class="nav-link active"
                        id="pills-home-tab"
                        data-bs-toggle="pill"
                        data-bs-target="#pills-home"
                        type="button"
                        role="tab"
                        aria-controls="pills-home"
                        aria-selected="true"
                        @onclick="() => SelectGameDay(gameDay.index)"
                    >
                        @(gameDay.index + 1)
                    </button>
                }
                else
                {
                    <button
                        class="nav-link"
                        id="pills-home-tab"
                        data-bs-toggle="pill"
                        data-bs-target="#pills-home"
                        type="button"
                        role="tab"
                        aria-controls="pills-home"
                        aria-selected="true"
                        @onclick="() => SelectGameDay(gameDay.index)"
                    >
                        @(gameDay.index + 1)
                    </button>
                }
            </li>
        }
    </ul>
    <div class="tab-content" id="pills-tabContent">
        @foreach (var gameDay in _league.GameDays.Select((value, index) => new {value, index}))
        {
            @if (ActiveDay == gameDay.index)
            {
                <p class="lead">@gameDay.value.StartDate.ToString("dd.MM.") - @gameDay.value.EndDate.ToString("dd.MM.")</p>
                <div class="tab-pane fade show active" id="pills-home" role="tabpanel" aria-labelledby="pills-home-tab">
                <div class="card" style="width: 18rem;">
                    <ul class="list-group list-group-flush">
                        @foreach (var day in gameDay.value.Matchups)
                        {
                            <li class="list-group-item cursor" @onclick="() => GoToMatch(day.MatchId)">
                                <div class="d-flex w-100 justify-content-between">
                                    <h5 class="mb-1">@(day.Name1) vs @(day.Name2)</h5>
                                    <small>@day.Result?.RecordedAt.ToString("dd.MM.")</small>
                                </div>
                                @if (day.Result != null)
                                {
                                    <p class="mb-1">@day.Result.Player1.BattlePoints : @day.Result.Player2.BattlePoints</p>
                                    <small>@day.Result.Player1.VictoryPoints @GetSecondaryString1(day.Result.SecondaryObjective) : @day.Result.Player2.VictoryPoints @GetSecondaryString2(day.Result.SecondaryObjective)</small>
                                }
                                else
                                {
                                    <p class="mb-1">not reported yet</p>
                                }
                            </li>
                        }
                    </ul>
                </div>
                </div>
            }
            else
            {
                <div class="tab-pane fade" id="pills-home" role="tabpanel" aria-labelledby="pills-home-tab">
                </div>
            }
        }
    </div>
}

@inject ILeagueRepository _leagueRepository

@code {
    [Parameter]
    public string LeagueId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (ObjectId.TryParse(LeagueId, out var arsed))
        {
            _league = await _leagueRepository.Load(arsed);
        }
    }

    private League _league;
    public int ActiveDay { get; set; }

    private void GoToPlayer(ObjectId playerId)
    {
        _navigation.NavigateTo($"player/{playerId}");
    }

    private void SelectGameDay(int id)
    {
        ActiveDay = id;
        StateHasChanged();
    }

    private void GoToMatch(ObjectId matchId)
    {
        _navigation.NavigateTo($"league/{_league.Id}/match/{matchId}");
    }

    private string GetSecondaryString1(SecondaryObjectiveState resultSecondaryObjective)
    {
        if (resultSecondaryObjective == SecondaryObjectiveState.player1)
        {
            return "(+2nd obj.)";
        }

        return "";
    }

    private string GetSecondaryString2(SecondaryObjectiveState resultSecondaryObjective)
    {
        if (resultSecondaryObjective == SecondaryObjectiveState.player2)
        {
            return "(+2nd obj.)";
        }

        return "";
    }

}