@page "/"
@using FadingFlame.Leagues
@using FadingFlame.Players
@using MongoDB.Bson
@using FadingFlame.Admin

<div>
    <h1>Welcome to the Fading Flame League!</h1>
    <hr class="my-4">
    <p class="lead">The next season starts on @_seasonState.CurrentSeason.StartDate.ToMyDate() and list submission will end on the @_seasonState.CurrentSeason.ListSubmissionDeadline.ToMyDate()!</p>
    <hr class="my-4">
    @if(!_userState.LoadingPlayer && !_userState.LoggedInPlayer.SubmittedLists)
    {
        <div class="pt-3 pb-3 alert alert-warning text-center" role="alert">
            You did not submit your lists yet, to participate in the next season make sure to do that in your profile!
        </div>
    }
</div>

<div class="row row-cols-auto justify-content-around">
    @foreach (var league in _leagues)
    {
        <div class="col mb-4 cursor" @onclick="() => GoToLeague(league.Id)">
            <div class="card" style="width: 18rem;">
                <div class="card-header">
                    @league.DivisionId @league.Name
                </div>
                <div class="card-body">
                     <span class="oi oi-star" aria-hidden="true"></span><span class="card-title mx-2">@GetName(league.Players.First().Id)</span>
                </div>
            </div>
        </div>  
    }
</div>

@inject IPlayerRepository _playerRepository
@inject ILeagueRepository _leagueRepository
@inject NavigationManager _navigation
@inject SeasonState _seasonState
@inject UserState _userState

@code
{
    private List<League> _leagues = new();
    private List<Player> _playersInLeague = new();

    protected override void OnInitialized()
    {
        _seasonState.SeasonsChanged += OnInitializedAsync;
        _userState.UserLoggedIn += (_, _) => StateHasChanged();
    }

    private async void OnInitializedAsync(object sender, EventArgs e)
    {
        await OnInitializedAsync();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _leagues = await _leagueRepository.LoadForSeason(_seasonState.CurrentSeason.SeasonId);
        _playersInLeague = await _playerRepository.LoadForLeague(_leagues.SelectMany(l => l.Players).Select(p => p.Id).ToList(), _seasonState.CurrentSeason.SeasonId);
    }

    private string GetName(ObjectId playerId)
    {
        return _playersInLeague.FirstOrDefault(p => p.Id == playerId)?.DisplayName;
    }

    public void GoToLeague(ObjectId leagueId)
    {
        _navigation.NavigateTo($"league/{leagueId}");
    }
}
