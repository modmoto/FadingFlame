@page "/lists"
@using FadingFlame.Players
@using MongoDB.Bson
@using FadingFlame.Admin
@inject IPlayerRepository _playerRepository
@inject NavigationManager _navigation
@inject SeasonState _seasonState

<div>
    <h1>Lists played this season</h1>
    <hr class="my-4">
    @if (_seasonState.CurrentSeason.ListSubmissionIsOver)
    {
        <select class="form-select form-select-lg mb-3" aria-label=".form-select-lg example" @onchange="SelectFaction">
            <option selected value="0">All factions</option>
            @foreach (var faction in Enum.GetValues<Faction>())
            {
                <option value="@faction">@faction.ToFactionString()</option>
            }
        </select>
        @foreach (var player in _enlistedPlayers)
        {
            <div class="card">
                <div class="card-header cursor" @onclick="() => GoToPlayer(player.Id)">
                    <div><b>@player.DisplayName: </b></div>
                </div>
                <div class="card-body">
                    <div class="row align-items-start">
                        <div class="col">
                            <div class="form-group">
                                <label>First List: </label>
                                <div><b>@player.Army.List1.Faction.ToFactionString()</b></div>
                                <div><b>@player.Army.List1.Name</b></div>
                            </div>
                            <hr class="my-3">
                            <div class="form-group">
                                <div style="white-space:pre-wrap;">@player.Army.List1.List</div>
                            </div>
                        </div>
                        <div class="col">
                            <div class="form-group">
                                <label>Second List: </label>
                                <div><b>@player.Army.List2.Faction.ToFactionString()</b></div>
                                <div><b>@player.Army.List2.Name</b></div>
                            </div>
                            <hr class="my-3">
                            <div class="form-group">
                                <div style="white-space:pre-wrap;">@player.Army.List2.List</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <hr class="my-3">
        }
    }
    else
    {
        <h4>Lists will be displayed after @(_seasonState.CurrentSeason.StartDate.ToMyDate())</h4>
    }
    
</div>

@code
{
    private List<Player> _enlistedPlayers = new();
    private List<Player> _enlistedPlayersOriginal = new();

    protected override async Task OnInitializedAsync()
    {
        _enlistedPlayersOriginal = await _playerRepository.PlayersThatEnlisted();
        _enlistedPlayers = _enlistedPlayersOriginal;
        _seasonState.SeasonsChanged += (_, _) => StateHasChanged();
    }

    private void GoToPlayer(ObjectId playerId)
    {
        _navigation.NavigateTo($"player/{playerId}");
    }

    private void SelectFaction(ChangeEventArgs e)
    {
        var enumString = e.Value?.ToString();
        if (Enum.TryParse<Faction>(enumString, out var en))
        {
            if (en == 0)
            {
                _enlistedPlayers = _enlistedPlayersOriginal;
            }
            else
            {
                _enlistedPlayers = _enlistedPlayersOriginal.Where(l =>
                    l.Army.List1.Faction == en
                    || l.Army.List2.Faction == en).ToList();
            }
        }

        StateHasChanged();
    }
}
