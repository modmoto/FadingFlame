@page "/player/{Id}"
@using Microsoft.AspNetCore.Components
@using FadingFlame.Players
@using FadingFlame.UserAccounts
@using MongoDB.Bson

@inject IPlayerRepository _playerRepository
@inject UserState _state

<div class="card">
    <h4 class="card-header">Profile</h4>
    <div class="card-body">
        @if (_isLoggedInUser)
        {
            <EditForm Model="@_model" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator/>
                <div class="form-group">
                    <label>Name: </label>
                    <InputText @bind-Value="_model.DisplayName" class="form-control"/>
                    <ValidationMessage For="@(() => _model.DisplayName)"/>
                </div>
                <div class="form-group">
                    <label>Discord Tag: </label>
                    <InputText @bind-Value="_model.DiscordTag" class="form-control"/>
                    <ValidationMessage For="@(() => _model.DiscordTag)"/>
                </div>
                <button disabled="@_loading" class="btn btn-primary">
                    @if (_loading)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Save Profile
                </button>
            </EditForm>
        }
        else
        {
            <div class="form-group">
                <label>Name: </label>
                <span>@_model.DisplayName</span>
            </div>
            <div class="form-group">
                <label>Discord Tag: </label>
                <span>@_model.DiscordTag</span>
            </div>
        }

    </div>
</div>

@code{
    private EditUserModel _model = new();
    private bool _loading;
    private bool _isLoggedInUser;
    [ParameterAttribute]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (ObjectId.TryParse(Id, out var realId))
        {
            var layer = await _playerRepository.Load(realId);
            if (layer == null)
            {
                // goto to not found
            }
            else
            {
                var layerId = _state.LoggedInPlayerId;
                if (layerId == layer.Id)
                {
                    _isLoggedInUser = true;
                }

                _model = new EditUserModel
                {
                    DiscordTag = layer.DiscordTag,
                    DisplayName = layer.DisplayName
                };

                StateHasChanged();
            }
        }
    }

    private async Task OnValidSubmit()
    {
        _loading = true;
        var layer = await _playerRepository.Load(new ObjectId(Id));
        layer.DiscordTag = _model.DiscordTag;
        layer.DisplayName = _model.DisplayName;
        await _playerRepository.Udate(layer);
        _loading = false;
    }
}