@page "/lists"
@using FadingFlame.Players
@using MongoDB.Bson
@using FadingFlame.Admin
@using FadingFlame.Leagues

<div>
    <h1>Lists played this season</h1>
    <hr class="my-4">
    @if (_seasonState.CurrentSeason.ListSubmissionIsOver)
    {
        <div style="display: flex; flex-direction: row">
            <select class="form-select form-select-lg mb-3 me-2" aria-label=".form-select-lg example" @onchange="SelectFaction">
                <option selected value="0">All factions</option>
                @foreach (var faction in Enum.GetValues<Faction>())
                {
                    <option value="@faction">@faction.ToCamelCaseString()</option>
                }
            </select>
            <select class="form-select form-select-lg mb-3 ms-2" aria-label=".form-select-lg example" @onchange="SelectLeague">
                <option selected value="@ObjectId.Empty.ToString()">All Leagues</option>
                @foreach (var league in _leagues)
                {
                    <option value="@league.Id">@league.DivisionId @league.Name</option>
                }
            </select>
        </div>
        @foreach (var player in _enlistedPlayers)
        {
            <div class="card">
                <div class="card-header cursor" @onclick="() => GoToPlayer(player.Id)">
                    <div><b>@player.DisplayName: </b></div>
                </div>
                <div class="card-body">
                    <div class="row align-items-start">
                        <div class="col">
                            <div class="form-group">
                                <label>First List: </label>
                                <div><b>@player.ArmyCurrentSeason.List1.Faction.ToCamelCaseString()</b></div>
                                <div><b>@player.ArmyCurrentSeason.List1.Name</b></div>
                            </div>
                            <hr class="my-3">
                            <div class="form-group">
                                <div style="white-space:pre-wrap;">@player.ArmyCurrentSeason.List1.List</div>
                            </div>
                        </div>
                        <div class="col">
                            <div class="form-group">
                                <label>Second List: </label>
                                <div><b>@player.ArmyCurrentSeason.List2.Faction.ToCamelCaseString()</b></div>
                                <div><b>@player.ArmyCurrentSeason.List2.Name</b></div>
                            </div>
                            <hr class="my-3">
                            <div class="form-group">
                                <div style="white-space:pre-wrap;">@player.ArmyCurrentSeason.List2.List</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <hr class="my-3">
        }
    }
    else
    {
        <h4>Lists will be displayed after @(_seasonState.CurrentSeason.ListSubmissionDeadline.ToMyDate())</h4>
    }
    
</div>

@inject IPlayerRepository _playerRepository
@inject ILeagueRepository _leagueRepository
@inject NavigationManager _navigation
@inject SeasonState _seasonState

@code
{
    private List<Player> _enlistedPlayers = new();
    private List<Player> _enlistedPlayersOriginal = new();
    private List<League> _leagues = new();
    private Faction _factionFilter = 0;
    private ObjectId _leagueFilter = ObjectId.Empty;

    protected override void OnInitialized()
    {
        _seasonState.SeasonsChanged += LoadRest;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadStuff();
    }

    private async void LoadRest(object sender, EventArgs e)
    {
        await LoadStuff();
    }

    private async Task LoadStuff()
    {
        _leagues = await _leagueRepository.LoadForSeason(_seasonState.CurrentSeason.SeasonId);
        _enlistedPlayersOriginal = await _playerRepository.PlayersWithListInCurrentSeason();
        _enlistedPlayers = _enlistedPlayersOriginal;
        StateHasChanged();
    }

    private void GoToPlayer(ObjectId playerId)
    {
        _navigation.NavigateTo($"player/{playerId}");
    }

    private void SelectFaction(ChangeEventArgs e)
    {
        var enumString = e.Value?.ToString();
        if (Enum.TryParse<Faction>(enumString, out var en))
        {
            _factionFilter = en;
            FilterLists();
        }

        StateHasChanged();
    }

    private void FilterLists()
    {
        var playersAfterFaction = FilterByFaction();
        _enlistedPlayers = FilterByLeague(playersAfterFaction);
    }

    private List<Player> FilterByLeague(List<Player> players)
    {
        if (_leagueFilter == ObjectId.Empty) return players;

        var league = _leagues.Single(l => l.Id == _leagueFilter);
        var playerIds = league.Players.Select(p => p.Id);
        var playersWithFactionInLeague = players.Where(p => playerIds.Contains(p.Id)).ToList();
        return playersWithFactionInLeague;
    }

    private List<Player> FilterByFaction()
    {
        if (_factionFilter == 0)
        {
            return _enlistedPlayersOriginal;
        }
        
        return _enlistedPlayersOriginal.Where(l =>
            l.ArmyCurrentSeason.List1.Faction == _factionFilter
            || l.ArmyCurrentSeason.List2.Faction == _factionFilter).ToList();
    }

    private void SelectLeague(ChangeEventArgs e)
    {
        var leagueIdRaw = e.Value?.ToString();
        if (ObjectId.TryParse(leagueIdRaw, out var leagueId))
        {
            _leagueFilter = leagueId;
            FilterLists();
        }
    }
}
