@page "/matches"
@using MongoDB.Bson
@using FadingFlame.Leagues
@using FadingFlame.Players
@using FadingFlame.Admin
@using FadingFlame.Lists
@using FadingFlame.Matchups

<div>
    <div class="row">
            <div class="col">
                <h1>Match Overview</h1>
            </div>
            <div class="col">
                <div class="dropdown float-end">
                    <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownSeason" data-bs-toggle="dropdown" aria-expanded="false">
                        Switch season
                    </button>
                    <ul class="dropdown-menu" aria-labelledby="dropdownSeason">
                        @foreach (var season in _seasons)
                        {
                            <li>
                                <a class="dropdown-item" @onclick="() => SelectSeason(season)">@season</a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>  
    <hr class="my-4">
</div>
@if (!_leagues.Any())
{
    <div>
        Loading...
    </div>
}
else 
{
    <ul class="nav nav-pills mb-3" id="gameday-overview-tab" role="tablist">
    @foreach (var gameDay in _leagues.First().GameDays.Select((value, index) => new { value, index }))
    {
        <li class="nav-item" role="presentation">
            @if (_activeDay == gameDay.index)
            {
                <button
                    class="nav-link active"
                    id="@("game-day-" + gameDay.index + 1)"
                    data-bs-toggle="tab"
                    data-bs-target="@("#game-day-" + gameDay.index + 1)"
                    type="button"
                    role="tab"
                    aria-controls="home"
                    @onclick="() => SelectGameDay(gameDay.index)"
                    aria-selected="true"
                >
                     @GetGameDayName(gameDay.index)
                </button>
            }
            else
            {
                <button
                    class="nav-link"
                    id="@("game-day-" + gameDay.index + 1)"
                    data-bs-toggle="tab"
                    data-bs-target="@("#game-day-" + gameDay.index + 1)"
                    type="button"
                    role="tab"
                    aria-controls="home"
                    @onclick="() => SelectGameDay(gameDay.index)"
                    aria-selected="true"
                >
                    @GetGameDayName(gameDay.index)
                </button>
            }
        </li>
    }
</ul>
<div class="tab-content" id="gameday-overview-tabContent"> 
    @foreach (var gameDay in _leagues.First().GameDays.Select((value, index) => new {value, index}))
    {
        <div class="@GetActiveOrNot(gameDay.index)" id="@("game-day-" + gameDay.index + 1)" role="tabpanel" aria-labelledby="@("#game-day-" + gameDay.index + 1)">
            @if (gameDay.index == 5)
            {
                <div class="lead mb-3">@_leagues.First().GameDays.SkipLast(1).Last().EndDate.ToMyDate() - @_leagues.First().PromotionDeadLine.ToMyDate()  —  @Deployment.RandomDeployment.ToCamelCaseString() with @SecondaryObjective.RandomObjective.ToCamelCaseString()</div>
            }
            else
            {
                <div class="lead mb-3">@gameDay.value.StartDate.ToMyDate() - @gameDay.value.EndDate.ToMyDate() — @gameDay.value.Deployment.ToCamelCaseString() with @gameDay.value.SecondaryObjective.ToCamelCaseString()</div>
            }
            <table class="table">
                <thead>
                <tr>
                    <th>League</th>
                    <th>Player 1</th>
                    <th>Player 2</th>
                    <th>Result</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var item in _selectedGameDays[_activeDay])
                {
                    @foreach (var match in item.Matchups)
                    {
                        <tr @onclick="() => GoToMatch(match)" class="cursor">
                            <td>@GetLeague(match).DivisionId</td>
                            <td>@GetName(match.Player1) @ListName1(match)</td>
                            <td>@GetName(match.Player2) @ListName2(match)</td>
                            <td>@GetResult(match)</td>
                        </tr>
                    }
                }
                </tbody>
            </table>
        </div>
    }
</div>
}

@inject ILeagueRepository LeagueRepository
@inject IPlayerRepository PlayerRepository
@inject NavigationManager Navigation
@inject LoggedInUserState LoggedInUserState
@inject SeasonState SeasonState

@code {

    [Parameter]
    public string LeagueId { get; set; }

    private int _activeDay;
    private List<League> _leagues = new();
    private List<List<GameDay>> _selectedGameDays = new();
    private List<Player> _playersInSeason = new();
    private List<int> _seasons = new();

    protected override void OnInitialized()
    {
        LoggedInUserState.UserLoggedIn += (_, _) => StateHasChanged();
        SeasonState.SeasonsChanged += LoadStuff;
    }
    
    private async void SelectSeason(int season)
    {
        _selectedGameDays = new();
        _playersInSeason = new();
        _leagues = new();
        _activeDay = 0;
        await LoadData(season);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData(SeasonState.CurrentSeason.SeasonId);
        _seasons = Enumerable.Range(2, SeasonState.CurrentSeason.SeasonId - 1).Reverse().ToList();
    }

    private async Task LoadData(int seasonId)
    {
        _leagues = await LeagueRepository.LoadForSeason(seasonId);
        var playerIds = _leagues.SelectMany(l => l.Players.Select(p => p.Id)).ToList();
        _playersInSeason = await PlayerRepository.LoadForLeague(playerIds);
        
        var now = DateTime.UtcNow;
        if (_leagues.Any())
        {
            var foundIndex = false;
            var league = _leagues.First();
            for (var i = 0; i < league.GameDays.Count; i++)
            {
                var gameDays = _leagues.Where(l => i < l.GameDays.Count).Select(l => l.GameDays[i]).ToList();
                _selectedGameDays.Add(gameDays);
                if (!foundIndex && now < league.GameDays[i].EndDate)
                {
                    _activeDay = i;
                    foundIndex = true;
                }
            }

            StateHasChanged();
        }
    }

    private async void LoadStuff(object sender, EventArgs eventArgs)
    {
        await OnInitializedAsync();
        StateHasChanged();
    }

    private void SelectGameDay(int id)
    {
        _activeDay = id;
        StateHasChanged();
    }

    private string GetName(ObjectId playerId)
    {
        return _playersInSeason.FirstOrDefault(p => p.Id == playerId)?.DisplayName;
    }

    private string ListName1(Matchup match)
    {
        return match.PlayersSelectedList ? $"({GetRace1(match)})" : "";
    }

    private string ListName2(Matchup match)
    {
        return match.PlayersSelectedList ? $"({GetRace2(match)})" : "";
    }

    private string GetRace1(Matchup match)
    {
        var player = _playersInSeason.FirstOrDefault(p => p.Id == match.Player1);
        if (player == null) return "";
        return match.Player1List == player.ArmyCurrentSeason?.List1.Name ? player.ArmyCurrentSeason?.List1.Faction.ToCamelCaseString() : player.ArmyCurrentSeason?.List2.Faction.ToCamelCaseString();
    }

    private string GetRace2(Matchup match)
    {
        var player = _playersInSeason.FirstOrDefault(p => p.Id == match.Player2);
        if (player == null) return "";
        return match.Player2List == player.ArmyCurrentSeason?.List1.Name ? player.ArmyCurrentSeason?.List1.Faction.ToCamelCaseString() : player.ArmyCurrentSeason?.List2.Faction.ToCamelCaseString();
    }

    private string GetResult(Matchup match)
    {
        var result = match.Result;
        if (result == null) return "";

        return $"{result.Player1.BattlePoints} : {result.Player2.BattlePoints}";
    }

    private League GetLeague(Matchup match)
    {
        return _leagues.First(l => l.GameDays.SelectMany(g => g.MatchupIds).Contains(match.Id));
    }

    private void GoToMatch(Matchup match)
    {
        var league = GetLeague(match);
        Navigation.NavigateTo($"match/{match.Id}?leagueId={league.Id}");
    }

    private string GetActiveOrNot(int index)
    {
        return index == _activeDay || index == League.GamesCount ? "tab-pane fade show active" : "tab-pane fade";
    }

    private string GetGameDayName(int gameDay)
    {
        return gameDay == League.GamesCount ? "Promotion" : (gameDay + 1).ToString();
    }
}