@page "/match/{matchId}"
@using MongoDB.Bson
@using FadingFlame.Leagues
@using FadingFlame.Lists
@using FadingFlame.Players
@using FadingFlame.Playoffs
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.WebUtilities
@using FadingFlame.Admin
@using FadingFlame.Players.Pages

@if (_loading)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <h1>
        <span class="cursor" @onclick="() => GoToPlayer(_player1)">@Player1Name</span>
        VS
        <span class="cursor" @onclick="() => GoToPlayer(_player2)">@Player2Name</span>
    </h1>
    @if (_matchup.IsFinished)
    {
        <div class="blockquote-footer mt-2">
            @_matchup.Result.RecordedAt.ToMyDateYear()
            @if (_matchup.Result.WasDefLoss)
            {
                <span> (Loss by not responding/showing up)</span>
            }
        </div>
    }
    if (_matchup.IsChallenge)
    {
        if (!_matchup.IsFinished)
        {
            if (!_matchup.PlayersSelectedList)
            {
                @if (Player1LoggedIn)
                {
                    if (string.IsNullOrEmpty(_listEditModelPlayer2.List))
                    {
                        <div>Your opponent did not enter his list yet</div>
                    }
                    else
                    {
                        <div>Your opponent entered a list and is waiting for you</div>
                    }
                }
                @if (Player2LoggedIn)
                {
                    if (string.IsNullOrEmpty(_listEditModelPlayer1.List))
                    {
                        <div>Your opponent did not enter his list yet</div>
                    }
                    else
                    {
                        <div>Your opponent entered a list and is waiting for you</div>
                    }
                }
                
                <h4 class="my-3">Enter your list for the match</h4>
                <EditForm EditContext="@_editContextLists">
                    <DataAnnotationsValidator/>
                    @if (Player1LoggedIn)
                    {
                        <FreshListComponent List="@(_listEditModelPlayer1)" HideName/>
                    }
                    
                    @if (Player2LoggedIn)
                    {
                        <FreshListComponent List="@(_listEditModelPlayer2)" HideName/>
                    }
                    <button disabled="@_loadingChallengeListEdit" class="btn btn-primary" @onclick="OnSubmitList">
                        @if (_loadingChallengeListEdit)
                        {
                            <span class="spinner-border spinner-border-sm mr-1"></span>
                        }
                        Save list
                    </button>
                </EditForm>
            }
        }

        if (CanEditMatch && MatchIsEditable && _matchup.PlayersSelectedList || (_matchup.PlayersSelectedList && _userState.UserIsAdmin))
        {
            <EditForm Model="@_model" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator/>
                <div class="row align-items-start mt-3">
                    <div class="col form-group">
                        <label>Victory Points @Player1Name (0-5100):</label>
                        <InputNumber @bind-Value="_model.Player1.VictoryPoints" class="form-control my-3"/>
                        <ValidationMessage For="@(() => _model.Player1.VictoryPoints)"/>
                        <div class="form-check">
                            <InputCheckbox class="form-check-input" @onclick="() => Select2ndObjective(1)" @bind-Value="_secondaryObjectivePlayer1"/>
                            <label class="form-check-label">
                                Won secondary objective
                            </label>
                        </div>
                    </div>
                    <div class="col form-group">
                        <label>Victory Points @_player2?.DisplayName (0-5100):</label>
                        <InputNumber @bind-Value="_model.Player2.VictoryPoints" class="form-control my-3"/>
                        <ValidationMessage For="@(() => _model.Player2.VictoryPoints)"/>
                        <div class="form-check">
                            <InputCheckbox class="form-check-input" @onclick="() => Select2ndObjective(2)" @bind-Value="_secondaryObjectivePlayer2"/>
                            <label class="form-check-label">
                                Won secondary objective
                            </label>
                        </div>
                    </div>
                </div>
                <hr class="my-3">
                <button disabled="@_loading" class="btn btn-primary">
                    @if (_loading)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    @if (!_matchup.IsFinished)
                    {
                        <span>Report Game</span>
                    }
                    else
                    {
                        <span>Edit Result (possible until @_matchup.Result.RecordedAt.AddDays(1).ToMyDateTime())</span>
                    }
                </button>
            </EditForm>
        }
    }
    else
    {
        if (CanEditMatch && MatchIsEditable || _userState.UserIsAdmin)
        {
            if (_matchup.PlayersSelectedList)
            {
                <div class="row align-items-start my-2">
                    <div class="col">
                        <div class="form-group">
                            <label>List of @Player1Name : </label>
                            <div><b>@_matchup.Player1List</b></div>
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-group">
                            <label>List of @Player2Name : </label>
                            <div><b>@_matchup.Player2List</b></div>
                        </div>
                    </div>
                </div>

                <EditForm Model="@_model" OnValidSubmit="OnValidSubmit">
                    <DataAnnotationsValidator/>
                    <div class="row align-items-start mt-3">
                        <div class="col form-group">
                            <label>Victory Points @Player1Name (0-5100):</label>
                            <InputNumber @bind-Value="_model.Player1.VictoryPoints" class="form-control my-3"/>
                            <ValidationMessage For="@(() => _model.Player1.VictoryPoints)"/>
                            <div class="form-check">
                                <InputCheckbox class="form-check-input" @onclick="() => Select2ndObjective(1)" @bind-Value="_secondaryObjectivePlayer1"/>
                                <label class="form-check-label">
                                    Won secondary objective
                                </label>
                            </div>
                        </div>
                        <div class="col form-group">
                            <label>Victory Points @_player2?.DisplayName (0-5100):</label>
                            <InputNumber @bind-Value="_model.Player2.VictoryPoints" class="form-control my-3"/>
                            <ValidationMessage For="@(() => _model.Player2.VictoryPoints)"/>
                            <div class="form-check">
                                <InputCheckbox class="form-check-input" @onclick="() => Select2ndObjective(2)" @bind-Value="_secondaryObjectivePlayer2"/>
                                <label class="form-check-label">
                                    Won secondary objective
                                </label>
                            </div>
                        </div>
                    </div>
                    <hr class="my-3">
                    <button disabled="@_loading" class="btn btn-primary">
                        @if (_loading)
                        {
                            <span class="spinner-border spinner-border-sm mr-1"></span>
                        }
                        @if (!_matchup.IsFinished)
                        {
                            <span>Report Game</span>
                        }
                        else
                        {
                            <span>Edit Result (possible until @_matchup.Result.RecordedAt.AddDays(1).ToMyDateTime())</span>
                        }
                    </button>
                </EditForm>
            }
            else
            {
                if (_listsOfLoggedInPlayer == null && !_userState.UserIsAdmin)
                {
                    <div class="alert alert-danger" role="alert">
                        You did not submit a list, submit a list on your profile!
                    </div>
                }
                else
                {
                    if (!string.IsNullOrEmpty(_selectedListAsString) && !_matchup.PlayersSelectedList)
                    {
                        <div class="row align-items-start mt-4">
                            <div class="col">
                                <div class="pt-3 pb-3 alert alert-success" role="alert" style="max-width: 25rem">
                                    Your list for the match: <b>@_selectedListAsString</b>
                                </div>
                                <div class="pb-3">Waiting for your opponent to select his list...</div>
                            </div>
                        </div>
                    }

                    if (_listsOfLoggedInPlayer != null)
                    {
                        <div class="row align-items-start">
                            <div class="col">
                                <div class="form-group">
                                    <select class="form-select form-select-lg mb-3" aria-label=".form-select-lg example" @bind="_selectedList">
                                        <option selected value="0">Select your list</option>
                                        <option value="1">@_listsOfLoggedInPlayer.List1.Name (@(GetListFacion(_listsOfLoggedInPlayer, _listsOfLoggedInPlayer.List1.Name)))</option>
                                        <option value="2">@_listsOfLoggedInPlayer.List2.Name (@(GetListFacion(_listsOfLoggedInPlayer, _listsOfLoggedInPlayer.List2.Name)))</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <button disabled="@_selectingList" class="btn btn-primary" @onclick="() => SelectListForMatch()">
                            @if (_selectingList)
                            {
                                <span class="spinner-border spinner-border-sm mr-1"></span>
                            }
                            Select list for match
                        </button>
                        <div class="mt-2">Selected lists will be hidden for everyone until both players have choosen a list</div>
                        <hr class="my-5">
                    }
                }
            }
        }
    }

    if (_matchup.IsFinished)
    {
        <div class="row align-items-start my-3">
            <div class="col form-group">
                <div>@_player1.DisplayName :</div>
                <div>Battle Points: <b>@_matchup.Result.Player1.BattlePoints</b></div>
                <div>Victory Points: @_matchup.Result.Player1.VictoryPoints (Diff.: @_matchup.Result.VictoryPointsDifference)</div>
                @if (_matchup.Result.SecondaryObjective == SecondaryObjectiveState.player1)
                {
                    <div class="form-check-label">
                        Won secondary objective
                    </div>
                }
                @if (_matchup.Result.SecondaryObjective == SecondaryObjectiveState.draw)
                {
                    <div class="form-check-label">
                        Draw on secondary objective
                    </div>
                }
            </div>
            <div class="col form-group">
                <div>@_player2.DisplayName :</div>
                <div>Battle Points: <b>@_matchup.Result.Player2.BattlePoints</b></div>
                <div>Victory Points: @_matchup.Result.Player2.VictoryPoints (Diff.: @_matchup.Result.VictoryPointsDifference)</div>
                @if (_matchup.Result.SecondaryObjective == SecondaryObjectiveState.player2)
                {
                    <div class="form-check-label">
                        Won secondary objective
                    </div>
                }
                @if (_matchup.Result.SecondaryObjective == SecondaryObjectiveState.draw)
                {
                    <div class="form-check-label">
                        Draw on secondary objective
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="row align-items-start my-2">
            <div class="col">Game was not reported yet...</div>
        </div>
    }

    if (_matchup.PlayersSelectedList)
    {
        <hr class="my-3">
        <div class="row align-items-start my-2">
            <div class="col">
                <div class="form-group">
                    <div>List: @_matchup.Player1List</div>
                    <div><b>@(Player1List.Faction.ToCamelCaseString())</b></div>
                </div>
                <hr class="my-3">
                <div class="form-group">
                    <div style="white-space:pre-wrap;">@(Player1List.List)</div>
                </div>
            </div>
            <div class="col">
                <div class="form-group">
                    <div>List: @_matchup.Player2List</div>
                    <div><b>@(Player2List.Faction.ToCamelCaseString())</b></div>
                </div>
                <hr class="my-3">
                <div class="form-group">
                    <div style="white-space:pre-wrap;">@(Player2List.List)</div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="row align-items-start my-2">
            @if (_matchup.Player2 == ObjectId.Empty)
            {
                <div class="col">This game was a freewin for @Player1Name</div>
            }
            else
            {
                <div class="col">Players are still selecting their lists...</div>
            }
        </div>
    }

    @if (_userState.UserIsAdmin && !_matchup.IsFinished)
    {
        <button @onclick="SetToZeroZero" disabled="@_loading" class="btn btn-danger mt-3">
            @if (_loading)
            {
                <span class="spinner-border spinner-border-sm mr-1"></span>
            }
            <span class="oi oi-shield me-2" aria-hidden="true"></span>Set game to 0 : 0
        </button>
        <div class="row mt-3">
            <div class="col">
                <button disabled="@_settingDefWin" class="col btn btn-danger" @onclick="() => SetDefLoss(_player1.Id)">
                    @if (_settingDefWin)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    <span class="oi oi-shield me-2"></span> 0:20 loss for @_player1.DisplayName
                </button>
            </div>
            <div class="col">
                <button disabled="@_settingDefWin" class="col btn btn-danger" @onclick="() => SetDefLoss(_player2.Id)">
                    @if (_settingDefWin)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    <span class="oi oi-shield me-2"></span> 0:20 loss for @_player2.DisplayName
                </button>
            </div>
        </div>
    }
}

@inject NavigationManager _navigation
@inject ILeagueRepository _leagueRepository
@inject IMatchupRepository _matchupRepository
@inject IPlayerRepository _playerRepository
@inject IChallengeService _challengeService
@inject IPlayoffRepository _playoffRepository
@inject LoggedInUserState _userState
@inject IMmrRepository _mmrRepository

@code {
    [Parameter]
    public string MatchId { get; set; }
    private MatchResultDto _model = new();
    private League _league;
    private Matchup _matchup;
    private Army _listsOfLoggedInPlayer;
    private Player _player1;
    private Player _player2;
    private string Player1Name => _matchup.Player1 == ObjectId.Empty ? "Freewin" : _player1?.DisplayName ?? "tbd";
    private string Player2Name => _matchup.Player2 == ObjectId.Empty ? "Freewin" : _player2?.DisplayName ?? "tbd";
    private int _selectedList;
    private bool _loading = true;
    private bool _secondaryObjectivePlayer1;
    private bool _secondaryObjectivePlayer2;
    private bool _settingDefWin;
    private string _selectedListAsString;
    private bool _selectingList;
    private bool _loadingChallengeListEdit;
    private EditContext _editContextLists;
    private Playoff _playoff;
    private GameListEditModel _listEditModelPlayer1 = new();
    private GameListEditModel _listEditModelPlayer2 = new();
    private bool Player1LoggedIn => _model.Player1.Id == _userState.LoggedInPlayer.Id;
    private bool Player2LoggedIn =>_model.Player2?.Id == _userState.LoggedInPlayer.Id;
    private bool CanEditMatch => Player1LoggedIn || Player2LoggedIn;
    private bool MatchIsEditable => _matchup.Result == null || DateTime.UtcNow.AddDays(-1) < _matchup.Result.RecordedAt;
    private GameList Player1List
    {
        get
        {
            if (_matchup.IsChallenge && !_matchup.IsFinished)
            {
                return _matchup.ChallengePlayer1List;
            }
            var resultPlayer1List = _matchup.Result?.Player1List;
            return resultPlayer1List ?? (_player1.ArmyCurrentSeason.List1.Name == _matchup.Player1List ? _player1.ArmyCurrentSeason.List1 : _player1.ArmyCurrentSeason.List2);
        }
    }

    private GameList Player2List
    {
        get
        {
            if (_matchup.IsChallenge && !_matchup.IsFinished)
            {
                return _matchup.ChallengePlayer2List;
            }
            var resultPlayer2List = _matchup.Result?.Player2List;
            return resultPlayer2List ?? (_player2.ArmyCurrentSeason.List1.Name == _matchup.Player2List ? _player2.ArmyCurrentSeason.List1 : _player2.ArmyCurrentSeason.List2);
        }
    }

    protected override void OnInitialized()
    {
        _userState.UserLoggedIn += (_, _) => StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var uri = _navigation.ToAbsoluteUri(_navigation.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("leagueId", out var leagueId))
        {
            if (ObjectId.TryParse(leagueId, out var realLeagueId))
            {
                var league = await _leagueRepository.Load(realLeagueId);
                if (league == null)
                {
                    _navigation.NavigateTo("notfound");
                }
                else
                {
                    var match = league.GameDays
                        .SelectMany(g => g.Matchups)
                        .SingleOrDefault(m => m.Id.ToString() ==  MatchId);
                    if (match == null)
                    {
                        _navigation.NavigateTo("notfound");
                    }
                    else
                    {
                        _league = league;

                        await ExtractMatch(match);
                    }
                }
            }
            else
            {
                _navigation.NavigateTo("notfound");
            }
        }
        else if(QueryHelpers.ParseQuery(uri.Query).TryGetValue("playoffSeason", out var playoffSeason))
        {
            var playoff = await _playoffRepository.LoadForSeason(Int32.Parse(playoffSeason));
            _playoff = playoff;
            var matchup = _playoff.Rounds.SelectMany(r => r.Matchups).FirstOrDefault(m => m.Id.ToString() == MatchId);
            await ExtractMatch(matchup);
        }
        else
        {
            var matchup = await _matchupRepository.LoadMatch(new ObjectId(MatchId));
            await ExtractMatch(matchup);
        }

        _loading = false;
        StateHasChanged();
    }



    private async Task SetToZeroZero()
    {
        _loading = true;
        _league.SetZeroToZero(_model.MatchId);
        await _leagueRepository.Update(_league);
        _loading = false;
    }
    
    private async Task ExtractMatch(Matchup match)
    {
        if (match == null)
        {
            _navigation.NavigateTo("notfound");
            return;
        }

        _matchup = match;

        _player1 = await _playerRepository.Load(match.Player1);
        _player2 = await _playerRepository.Load(match.Player2);

        _model.Player1.Id = match.Player1;
        _model.Player1.VictoryPoints = match.Result?.Player1.VictoryPoints ?? 0;
        _model.Player2.Id = match.Player2;
        _model.Player2.VictoryPoints = match.Result?.Player2.VictoryPoints ?? 0;
        _secondaryObjectivePlayer1 = match.Result?.SecondaryObjective == SecondaryObjectiveState.player1; 
        _secondaryObjectivePlayer2 = match.Result?.SecondaryObjective == SecondaryObjectiveState.player2; 
        _model.MatchId = match.Id;
        
        
        _listEditModelPlayer1 = ExtractListModel(match.ChallengePlayer1List);
        _listEditModelPlayer2 = ExtractListModel(match.ChallengePlayer2List);
        
        if (Player1LoggedIn)
        {
            _listsOfLoggedInPlayer = _player1.ArmyCurrentSeason;
            _selectedListAsString = $"{match.Player1List}";
            _editContextLists = new EditContext(_listEditModelPlayer1);
        }

        if (Player2LoggedIn)
        {
            _listsOfLoggedInPlayer = _player2.ArmyCurrentSeason;
            _selectedListAsString = $"{match.Player2List}";
            _editContextLists = new EditContext(_listEditModelPlayer2);
        }
    }

    private GameListEditModel ExtractListModel(GameList gameList)
    {
        return new GameListEditModel
        {
            Faction = gameList?.Faction ?? Faction.None,
            List = gameList?.List,
            Name = gameList?.Name
        };
    }

    private string GetListFacion(Army army, string listName)
    {
        return (army.List1.Name == listName ? army.List1.Faction : army.List2.Faction).ToCamelCaseString();
    }

    private async Task OnValidSubmit()
    {
        _loading = true;

        var wasAllreadyReported = _matchup.IsFinished;
        if (wasAllreadyReported)
        {
            _league?.DeleteGameReport(_matchup.Id);
            _playoff?.DeleteGameReport(_matchup.Id);
            if (_matchup.Result.Player1.OldMmr != null && _matchup.Result.Player1.OldMmr != null)
            {
                _player1.UpdateMmr(_matchup.Result.Player1.OldMmr);
                _player2.UpdateMmr(_matchup.Result.Player2.OldMmr);
            }
        }

        await UpdateMatchWithResult(_model);

        _loading = false;
        StateHasChanged();
    }

    private async Task UpdateMatchWithResult(MatchResultDto model)
    {
        MatchResult result;

        model.SecondaryObjective = ConvertToEnum();

        if (_matchup.IsChallenge)
        {
            var gameList1 = GameList.Create(_listEditModelPlayer1.Name, _listEditModelPlayer1.List, _listEditModelPlayer1.Faction);
            var gameList2 = GameList.Create(_listEditModelPlayer2.Name, _listEditModelPlayer2.List, _listEditModelPlayer2.Faction);
            result = await MatchResult.Create(_mmrRepository, model.SecondaryObjective, _player1.Mmr, _player2.Mmr, model.Player1, model.Player2, gameList1, gameList2, false);
            _matchup.RecordResult(result);
            await _matchupRepository.UpdateMatch(_matchup);
        }
        else if (_league != null)
        {
            result = await _league.ReportGame(_mmrRepository, model, _player1.Mmr, _player2.Mmr, Player1List, Player2List);
            await _leagueRepository.Update(_league);
        }
        else
        {
            result = await _playoff.ReportGame(_mmrRepository, model, _player1.Mmr, _player2.Mmr, Player1List, Player2List);
            await _playoffRepository.Update(_playoff);
        }
        
        _player1.UpdateMmr(result.Player1.NewMmr);
        _player2.UpdateMmr(result.Player2.NewMmr);

        await _playerRepository.Update(_player1);
        await _playerRepository.Update(_player2);
    }

    private SecondaryObjectiveState ConvertToEnum()
    {
        if (!_secondaryObjectivePlayer1 && !_secondaryObjectivePlayer2)
        {
            return SecondaryObjectiveState.draw;
        }
        
        return _secondaryObjectivePlayer1 ? SecondaryObjectiveState.player1 : SecondaryObjectiveState.player2;
    }

    private async Task SelectListForMatch()
    {
        _selectingList = true;
        if (Player1LoggedIn)
        {
            UpdateSelectedList(_model.Player1.Id);
        }

        if (Player2LoggedIn)
        {
            UpdateSelectedList(_model.Player2.Id);
        }

        if (_league == null)
        {
            await _playoffRepository.Update(_playoff);
        }
        else
        {
            await _leagueRepository.Update(_league);
        }
        
        _selectingList = false;
    }

    private void UpdateSelectedList(ObjectId playerId)
    {
        if (_selectedList == 1)
        {
            _matchup.SelectList(playerId, _listsOfLoggedInPlayer.List1.Name);
            _selectedListAsString = _listsOfLoggedInPlayer.List1.Name;
        }

        if (_selectedList == 2)
        {
            _matchup.SelectList(playerId, _listsOfLoggedInPlayer.List2.Name);
            _selectedListAsString = _listsOfLoggedInPlayer.List2.Name;
        }
    }

    private void Select2ndObjective(int player)
    {
        if (player == 1)
        {
            _secondaryObjectivePlayer2 = false;
        }
        
        if (player == 2)
        {
            _secondaryObjectivePlayer1 = false;
        }
    }

    private void GoToPlayer(Player player)
    {
        _navigation.NavigateTo($"player/{player?.Id}");
    }

    private async Task SetDefLoss(ObjectId playerId)
    {
        _settingDefWin = true;
        _model = playerId == _player1.Id ? new MatchResultDto
        {
            MatchId = _matchup.Id,
            Player1 = new PlayerResultDto
            {
                Id = _player1.Id,
                VictoryPoints = 0
            },
            Player2 = new PlayerResultDto
            {
                Id = _player2.Id,
                VictoryPoints = 4500
            }
        } : new MatchResultDto
        {
            MatchId = _matchup.Id,
            Player1 = new PlayerResultDto
            {
                Id = _player1.Id,
                VictoryPoints = 4500
            },
            Player2 = new PlayerResultDto
            {
                Id = _player2.Id,
                VictoryPoints = 0
            }
        };
        _secondaryObjectivePlayer1 = _player2.Id == playerId;
        _secondaryObjectivePlayer2 = _player1.Id == playerId;
        _model.WasDefLoss = true;
        await UpdateMatchWithResult(_model);
        _settingDefWin = false;
    }

    private async Task OnSubmitList()
    {
        _loadingChallengeListEdit = true;
        if (Player1LoggedIn)
        {
            var gameList = GameList.Create(_listEditModelPlayer1.Name, _listEditModelPlayer1.List, _listEditModelPlayer1.Faction);
            _matchup.ChallengePlayer1List = gameList;
            await _matchupRepository.UpdateMatch(_matchup);
        }
        
        if (Player2LoggedIn)
        {
            var gameList = GameList.Create(_listEditModelPlayer2.Name, _listEditModelPlayer2.List, _listEditModelPlayer2.Faction);
            _matchup.ChallengePlayer2List = gameList;
            await _matchupRepository.UpdateMatch(_matchup);
        }
        _loadingChallengeListEdit = false;
    }

}