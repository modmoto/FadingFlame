@page "/match/{matchId}"
@using MongoDB.Bson
@using FadingFlame.Leagues
@using FadingFlame.Players
@using FadingFlame.Playoffs
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.WebUtilities

@if (_loading)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <h1>
        <span class="cursor" @onclick="() => GoToPlayer(_player1)">@Player1Name</span>
        VS
        <span class="cursor" @onclick="() => GoToPlayer(_player2)">@Player2Name</span>
    </h1>
    if (CanEditMatch && !_matchup.IsFinished)
    {
        if (_matchup.PlayersSelectedList)
        {
            <div class="row align-items-start my-2">
                <div class="col">
                    <div class="form-group">
                        <label>List of @Player1Name : </label>
                        <div><b>@_matchup.Player1List</b></div>
                    </div>
                </div>
                <div class="col">
                    <div class="form-group">
                        <label>List of @Player2Name : </label>
                        <div><b>@_matchup.Player2List</b></div>
                    </div>
                </div>
            </div>

            <EditForm Model="@_model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator/>
            <div class="row align-items-start mt-3">
                <div class="col form-group">
                    <label>Victory Points @Player1Name :</label>
                    <InputNumber @bind-Value="_model.Player1.VictoryPoints" class="form-control my-3"/>
                    <ValidationMessage For="@(() => _model.Player1.VictoryPoints)"/>
                    <div class="form-check">
                        <InputCheckbox class="form-check-input" @onclick="() => Select2ndObjective(1)" @bind-Value="_secondaryObjectivePlayer1"/>
                        <label class="form-check-label">
                            Won secondary objective
                        </label>
                    </div>
                </div>
                <div class="col form-group">
                    <label>Victory Points @_player2?.DisplayName :</label>
                    <InputNumber @bind-Value="_model.Player2.VictoryPoints" class="form-control my-3"/>
                    <ValidationMessage For="@(() => _model.Player2.VictoryPoints)"/>
                    <div class="form-check">
                        <InputCheckbox class="form-check-input" @onclick="() => Select2ndObjective(2)" @bind-Value="_secondaryObjectivePlayer2"/>
                        <label class="form-check-label">
                            Won secondary objective
                        </label>
                    </div>
                </div>
            </div>
            <hr class="my-3">
            <button disabled="@_loading" class="btn btn-primary">
                @if (_loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Report Game
            </button>
            </EditForm>
        }
        else
        {
            if (_listsOfLoggedInPlayer == null)
            {
                <div class="alert alert-danger" role="alert">
                    You did not submit a list, submit a list on your profile!
                </div>
            }
            else if (!string.IsNullOrEmpty(_selectedListAsString))
            {
                <div class="row align-items-start mt-4">
                    <div class="col">
                        <div class="pt-3 pb-3 alert alert-success w-25" role="alert">
                            Your list for the match: <b>@_selectedListAsString</b>
                        </div>
                        <div>Waiting for your opponent to select his list...</div>
                    </div>
                </div>
            }
            else
            {
                <div class="row align-items-start">
                    <div class="col">
                        <div class="form-group">
                            <label>List: </label>
                            <select class="form-select form-select-lg mb-3" aria-label=".form-select-lg example" @bind="_selectedList">
                                <option selected value="0">Select your list</option>
                                <option value="1">@_listsOfLoggedInPlayer.List1.Name (@(GetListFacion(_listsOfLoggedInPlayer, _listsOfLoggedInPlayer.List1.Name)))</option>
                                <option value="2">@_listsOfLoggedInPlayer.List2.Name (@(GetListFacion(_listsOfLoggedInPlayer, _listsOfLoggedInPlayer.List2.Name)))</option>
                            </select>
                        </div>
                    </div>
                </div>
                <button disabled="@_selectingList" class="btn btn-primary" @onclick="() => SelectListForMatch()">
                    @if (_selectingList)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Select list for match
                </button>
                <hr class="my-5">
            }
        }
    }
    else
    {
        if (_matchup.PlayersSelectedList)
        {
            <div class="row align-items-start my-2">
                <div class="col">
                    <div class="form-group">
                        <label>List of @Player1Name : </label>
                        <div><b>@_matchup.Player1List</b></div>
                    </div>
                </div>
                <div class="col">
                    <div class="form-group">
                        <label>List of @Player2Name : </label>
                        <div><b>@_matchup.Player2List</b></div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="row align-items-start my-2">
            @if (_matchup.Player2 == ObjectId.Empty)
            {
                <div class="col">This game was a freewin for @Player1Name</div>
            }
            else
            {
                <div class="col">Players are still selecting their lists...</div>
            }
            </div>
        }

        if (_matchup.IsFinished)
        {
            <div class="row align-items-start my-3">
                <div class="col form-group">
                    <label>Battle Points:</label>
                    <div><b>@_matchup.Result.Player1.BattlePoints</b></div>
                    <label>Victory Points:</label>
                    <div>@_matchup.Result.Player1.VictoryPoints (Diff.: @_matchup.Result.VictoryPointsDifference)</div>
                    @if (_matchup.Result.SecondaryObjective == SecondaryObjectiveState.player1)
                    {
                        <label class="form-check-label">
                            Won secondary objective
                        </label>
                    }
                    @if (_matchup.Result.SecondaryObjective == SecondaryObjectiveState.draw)
                    {
                        <label class="form-check-label">
                            Draw on secondary objective
                        </label>
                    }
                </div>
                <div class="col form-group">
                    <label>Battle Points:</label>
                    <div><b>@_matchup.Result.Player2.BattlePoints</b></div>
                    <label>Victory Points:</label>
                    <div>@_matchup.Result.Player2.VictoryPoints (Diff.: @_matchup.Result.VictoryPointsDifference)</div>
                    @if (_matchup.Result.SecondaryObjective == SecondaryObjectiveState.player2)
                    {
                        <label class="form-check-label">
                            Won secondary objective
                        </label>
                    }
                    @if (_matchup.Result.SecondaryObjective == SecondaryObjectiveState.draw)
                    {
                        <label class="form-check-label">
                            Draw on secondary objective
                        </label>
                    }
                </div>
            </div>
            if (_userState.UserIsAdmin && _league != null)
            {
                <button disabled="@_loadingDeleteResult" class="btn btn-danger mt-3" @onclick="() => DeleteGameResult()">
                    @if (_loadingDeleteResult)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    <span class="oi oi-shield" aria-hidden="true"></span> Delete game result
                </button>
            }
        }
        else
        {
            <div class="row align-items-start my-2">
                <div class="col">Game was not reported yet...</div>
            </div>
        }

    }
}

@inject NavigationManager _navigation
@inject ILeagueRepository _leagueRepository
@inject IPlayerRepository _playerRepository
@inject IPlayoffRepository _playoffRepository
@inject UserState _userState
@inject MmrRepository _mmrRepository

@code {
    [Parameter]
    public string MatchId { get; set; }
    private MatchResultDto _model = new();
    private League _league;
    private Matchup _matchup;
    private SeasonArmy _listsOfLoggedInPlayer;
    private Player _player1;
    private Player _player2;
    private string Player1Name => _matchup.Player1 == ObjectId.Empty ? "Freewin" : _player1?.DisplayName ?? "tbd";
    private string Player2Name => _matchup.Player2 == ObjectId.Empty ? "Freewin" : _player2?.DisplayName ?? "tbd";
    private int _selectedList;
    private bool _loading = true;
    private bool _loadingDeleteResult;
    private bool _secondaryObjectivePlayer1;
    private bool _secondaryObjectivePlayer2;
    private string _selectedListAsString;
    private bool _selectingList;
    private Playoff _playoff;
    private bool Player1LoggedIn => _model.Player1.Id == _userState.LoggedInPlayer.Id;
    private bool Player2LoggedIn =>_model.Player2?.Id == _userState.LoggedInPlayer.Id;
    private bool CanEditMatch => Player1LoggedIn || Player2LoggedIn;

    protected override void OnInitialized()
    {
        _userState.UserLoggedIn += (_, _) => StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var uri = _navigation.ToAbsoluteUri(_navigation.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("leagueId", out var leagueId))
        {
            if (ObjectId.TryParse(leagueId, out var realLeagueId))
            {
                var league = await _leagueRepository.Load(realLeagueId);
                if (league == null)
                {
                    _navigation.NavigateTo("notfound");
                }
                else
                {
                    var match = league.GameDays
                        .SelectMany(g => g.Matchups)
                        .SingleOrDefault(m => m.Id.ToString() ==  MatchId);
                    if (match == null)
                    {
                        _navigation.NavigateTo("notfound");
                    }
                    else
                    {
                        _league = league;

                        await ExtractMatch(match);
                    }
                }
            }
            else
            {
                _navigation.NavigateTo("notfound");
            }
        }
        else if(QueryHelpers.ParseQuery(uri.Query).TryGetValue("playoffSeason", out var playoffSeason))
        {
            var playoff = await _playoffRepository.LoadForSeason(Int32.Parse(playoffSeason));
            _playoff = playoff;
            var matchup = _playoff.Rounds.SelectMany(r => r.Matchups).FirstOrDefault(m => m.Id.ToString() == MatchId);
            await ExtractMatch(matchup);
        }
        else
        {
            _navigation.NavigateTo("notfound");
        }

        _loading = false;
        StateHasChanged();
    }

    private async Task ExtractMatch(Matchup match)
    {
        if (match == null)
        {
            _navigation.NavigateTo("notfound");
        }

        _matchup = match;

        _player1 = await _playerRepository.Load(match.Player1);
        _player2 = await _playerRepository.Load(match.Player2);

        _model.Player1.Id = match.Player1;
        _model.Player2.Id = match.Player2;
        _model.MatchId = match.Id;

        if (Player1LoggedIn)
        {
            _listsOfLoggedInPlayer = _player1.Army;
            _selectedListAsString = $"{match.Player1List}";
        }

        if (Player2LoggedIn)
        {
            _listsOfLoggedInPlayer = _player2.Army;
            _selectedListAsString = $"{match.Player2List}";
        }
    }

    private string GetListFacion(SeasonArmy army, string listName)
    {
        return (army.List1.Name == listName ? army.List1.Faction : army.List2.Faction).ToFactionString();
    }

    private async Task OnValidSubmit()
    {
        _loading = true;
        MatchResult result;
        if (_league != null)
        {
            _model.SecondaryObjective = ConvertToEnum();
            result = _league.ReportGame(_model);
            await _leagueRepository.Update(_league);
        }
        else
        {
            _model.SecondaryObjective = ConvertToEnum();
            result =_playoff.ReportGame(_model);
            await _playoffRepository.Update(_playoff);
        }

        await UpdateMmrs(result);

        _loading = false;
        StateHasChanged();
    }

    private async Task UpdateMmrs(MatchResult matchResult)
    {
        var layer = _player1.Id == matchResult.Player1.Id ? 1 : 2;
        var mmrsOld = new List<Mmr> { _player1.Mmr ?? Mmr.Create(), _player2.Mmr ?? Mmr.Create()};
        var mmrsNew = await _mmrRepository.UpdateMmrs(UpdateMmrRequest.Create(mmrsOld, layer));
        _player1.UpdateMmr(mmrsNew[0]);
        _player2.UpdateMmr(mmrsNew[1]);

        await _playerRepository.Update(_player1);
        await _playerRepository.Update(_player2);
    }

    private SecondaryObjectiveState ConvertToEnum()
    {
        if (!_secondaryObjectivePlayer1 && !_secondaryObjectivePlayer2)
        {
            return SecondaryObjectiveState.draw;
        }
        
        return _secondaryObjectivePlayer1 ? SecondaryObjectiveState.player1 : SecondaryObjectiveState.player2;
    }

    private async Task SelectListForMatch()
    {
        _selectingList = true;
        if (Player1LoggedIn)
        {
            UpdateSelectedList(_model.Player1.Id);
        }

        if (Player2LoggedIn)
        {
            UpdateSelectedList(_model.Player2.Id);
        }

        if (_league == null)
        {
            await _playoffRepository.Update(_playoff);
        }
        else
        {
            await _leagueRepository.Update(_league);
        }
        
        _selectingList = false;
    }

    private void UpdateSelectedList(ObjectId playerId)
    {
        if (_selectedList == 1)
        {
            _matchup.SelectList(playerId, _listsOfLoggedInPlayer.List1.Name);
            _selectedListAsString = _listsOfLoggedInPlayer.List1.Name;
        }

        if (_selectedList == 2)
        {
            _matchup.SelectList(playerId, _listsOfLoggedInPlayer.List2.Name);
            _selectedListAsString = _listsOfLoggedInPlayer.List2.Name;
        }
    }

    private void Select2ndObjective(int player)
    {
        if (player == 1)
        {
            _secondaryObjectivePlayer2 = false;
        }
        
        if (player == 2)
        {
            _secondaryObjectivePlayer1 = false;
        }
    }

    private void GoToPlayer(Player player)
    {
        _navigation.NavigateTo($"player/{player?.Id}");
    }

    private async Task DeleteGameResult()
    {
        _loadingDeleteResult = true;
        if (_league != null)
        {
            _league.DeleteGameReport(_matchup.Id);
            await _leagueRepository.Update(_league);
        }
        _loadingDeleteResult = false;
    }

}