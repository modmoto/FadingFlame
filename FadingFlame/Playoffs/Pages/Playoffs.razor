@page "/playoffs"
@using MongoDB.Bson
@using FadingFlame.Leagues
@using FadingFlame.Players
@using FadingFlame.UserAccounts
@inject IPlayoffRepository _playoffRepository
@inject IPlayerRepository _playerRepository
@inject NavigationManager _navigation
@inject UserState _userState

@if (_playoffs == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="row row-cols-auto justify-content-around">
        @foreach (var matchup in _playoffs.Rounds.SelectMany(r => r.Matchups))
        {
            <div class="@GetClasses(matchup)" @onclick="() => GoToMatch(matchup)">
                <div class="card" style="width: 18rem;">
                    <div class="card-body">
                        <h5 class="card-title">@GetVersusString(matchup)</h5>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code
{
    private Playoff _playoffs;
    private List<Player> _playersInPlayoffs = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _playoffs = await _playoffRepository.LoadForSeason(Season.Current);
        var listOfPlayerInPlayoffs = _playoffs.Rounds.First().Matchups.SelectMany(m => new List<ObjectId> { m.Player1, m.Player2 }).ToList();
        _playersInPlayoffs = await _playerRepository.LoadForLeague(listOfPlayerInPlayoffs);
        StateHasChanged();
    }

    public void GoToMatch(Matchup matchup)
    {
        if (UserIsOneOfThePlayers(matchup))
        {
            _navigation.NavigateTo($"match/{matchup.MatchId}?playoffSeason={_playoffs.Season}");    
        }
    }
    
    private string GetClasses(Matchup matchup)
    {
        return UserIsOneOfThePlayers(matchup) ? "card bg-light cursor" : "card";
    }

    private bool UserIsOneOfThePlayers(Matchup matchup)
    {
        return _userState.LoggedInPlayerId == matchup.Player1 || _userState.LoggedInPlayerId == matchup.Player2;
    }
    
    private string GetName(ObjectId playerId)
    {
        return _playersInPlayoffs.FirstOrDefault(p => p.Id == playerId)?.DisplayName;
    }

    private string GetVersusString(Matchup matchup)
    {
        if (matchup.Player2 == ObjectId.Empty) return $"Freewin for {GetName(matchup.Player1)}";

        return $"{GetName(matchup.Player1)} VS {GetName(matchup.Player2)}";
    }
}
