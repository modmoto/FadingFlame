@page "/playoffs"
@using MongoDB.Bson
@using FadingFlame.Leagues
@using FadingFlame.Players
@using FadingFlame.UserAccounts
@inject IPlayoffRepository _playoffRepository
@inject IPlayerRepository _playerRepository
@inject NavigationManager _navigation
@inject UserState _userState

@if (_playoffs == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div>
        <div style="display: flex;">
            @for (int i = 0; i < _playoffs.RoundCount; i++)
            {
                <div style="display: flex; flex-direction: column; justify-content: space-around; justify-items: center; ">
                    @foreach (var matchup in _roundsWithEmptyRounds[i].Matchups)
                    {
                        <div class="@GetClasses(matchup)" @onclick="() => GoToMatch(matchup)" style="width: 12rem">
                            <div class="card-body" style="padding: 0 !important;">
                                <div style="border-bottom: 1px solid rgba(0,0,0,.125); padding: 5px !important; padding-left: 1rem !important;">@GetName(matchup.Player1)</div>
                                <div style="padding: 5px !important; padding-left: 1rem !important;">@GetName(matchup.Player2)</div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
}

@code
{
    private Playoff _playoffs;
    private List<Round> _roundsWithEmptyRounds;
    private List<Player> _playersInPlayoffs = new();

    protected override async Task OnInitializedAsync()
    {
        _playoffs = await _playoffRepository.LoadForSeason(Season.Current);
        var listOfPlayerInPlayoffs = _playoffs.Rounds.First().Matchups.SelectMany(m => new List<ObjectId> { m.Player1, m.Player2 }).ToList();
        _playersInPlayoffs = await _playerRepository.LoadForLeague(listOfPlayerInPlayoffs);
        _roundsWithEmptyRounds = GetRounds();
    }

    private List<Round> GetRounds()
    {
        var rounds = new List<Round>();
        for (var index = 0; index <  _playoffs.RoundCount; index++)
        {
            if (_playoffs.Rounds.Count > index)
            {
                rounds.Add(_playoffs.Rounds[index]);
            }
            else
            {
                var playoffsRoundCount = _playoffs.RoundCount - 1 - index;
                var matchCounter = Math.Pow(2, playoffsRoundCount);
                var fakeplayers = new List<PlayerInLeague>();
                for (int i = 0; i < matchCounter; i++)
                {
                    fakeplayers.Add(PlayerInLeague.Create(ObjectId.GenerateNewId()));
                    fakeplayers.Add(PlayerInLeague.Create(ObjectId.GenerateNewId()));
                }

                rounds.Add(Round.Create(fakeplayers));
            }
        }

        return rounds;
    }

    public void GoToMatch(Matchup matchup)
    {
        if (UserIsOneOfThePlayers(matchup))
        {
            _navigation.NavigateTo($"match/{matchup.MatchId}?playoffSeason={_playoffs.Season}");    
        }
    }
    
    private string GetClasses(Matchup matchup)
    {
        return UserIsOneOfThePlayers(matchup) ? "card bg-light cursor mx-4 my-2" : "card mx-4 my-2";
    }

    private bool UserIsOneOfThePlayers(Matchup matchup)
    {
        return _userState.LoggedInPlayerId == matchup.Player1 || _userState.LoggedInPlayerId == matchup.Player2;
    }
    
    private string GetName(ObjectId playerId)
    {
        if (playerId == ObjectId.Empty) return "Freewin";

        return _playersInPlayoffs.FirstOrDefault(p => p.Id == playerId)?.DisplayName ?? "tbd";
    }
}
