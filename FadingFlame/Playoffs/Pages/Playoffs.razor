@page "/playoffs"
@using MongoDB.Bson
@using FadingFlame.Players
@using FadingFlame.Admin
@using FadingFlame.Matchups

<div>
    <div class="row">
        <div class="col">
            <h1>Playoffs Season @(_playoffs?.Season)</h1>
        </div>
        <div class="col">
            <div class="dropdown float-end">
                <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownSeason" data-bs-toggle="dropdown" aria-expanded="false">
                    Switch season
                </button>
                <ul class="dropdown-menu" aria-labelledby="dropdownSeason">
                    @foreach (var season in _seasons)
                    {
                        <li>
                            <a class="dropdown-item" @onclick="() => SelectSeason(season)">@season</a>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>        
    <hr class="my-4">
</div>
@if (_loading)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div>
        <div style="display: flex; padding-top: 3rem">
            @for (int i = 0; i < _playoffs.Rounds.Count; i++)
            {
                <div style="display: flex; flex-direction: column; justify-content: space-around; justify-items: center; ">
                    <div class="mx-4 mt-1 mb-3" style="position: absolute; top: 10rem">Round @(_playoffs.Rounds.Count - i)</div>
                    <div class="mx-4 mt-1 mb-3 blockquote-footer" style="position: absolute; top: 11.5rem">until @_playoffs.Rounds[i].DeadLine.ToMyDate()</div>
                    @foreach (var matchup in _playoffs.Rounds[i].Matchups)
                    {
                        <div class="@GetClasses(matchup)" @onclick="() => GoToMatch(matchup)" style="width: 12rem">
                            <div class="card-body" style="padding: 0 !important;">
                                <div class="playoff-border playoff-block">
                                    <div class="playoff-name">@GetName(matchup.Player1)</div>
                                    <div class="bg-opacity-25 bg-dark playoff-number playoff-number-top">@matchup.Result?.Player1?.BattlePoints</div>
                                </div>
                                <div class="playoff-block">
                                    <div class="playoff-name">@GetName(matchup.Player2)</div>
                                    <div class="bg-opacity-25 bg-dark playoff-number playoff-number-bottom">@matchup.Result?.Player2?.BattlePoints</div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
}

@inject IPlayoffRepository _playoffRepository
@inject IPlayerRepository _playerRepository
@inject NavigationManager _navigation
@inject LoggedInUserState _loggedInUserState
@inject SeasonState _seasonState

@code
{
    private bool _loading = true;
    private Playoff _playoffs;
    private List<Player> _playersInPlayoffs = new();
    private readonly string _unknownPlayer = "tbd";
    private List<int> _seasons = new();

    protected override void OnInitialized()
    {
        _seasonState.SeasonsChanged += (_, _) => LoadStuff();
        if (_seasonState.CurrentSeason != null && _seasonState.CurrentSeason?.SeasonId != 0)
        {
            _seasons = Enumerable.Range(2, _seasonState.CurrentSeason.SeasonId - 1).Reverse().ToList();
        }
    }

    private async void LoadStuff()
    {
        await OnInitializedAsync();
        _seasons = Enumerable.Range(2, _seasonState.CurrentSeason.SeasonId - 1).Reverse().ToList();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadPlayoffs(_seasonState.CurrentSeason.SeasonId);
        if (_playoffs == null)
        {
            await LoadPlayoffs(_seasonState.CurrentSeason.SeasonId - 1);
        }
    }

    private async Task LoadPlayoffs(int seasonId)
    {
        _playoffs = await _playoffRepository.LoadForSeason(seasonId);
        if (_playoffs != null)
        {
            var listOfPlayerInPlayoffs = _playoffs?.Rounds.First().Matchups
                .SelectMany(m => new List<ObjectId> {m.Player1, m.Player2}).ToList();
            _playersInPlayoffs =
                await _playerRepository.LoadForLeague(listOfPlayerInPlayoffs);
            _loading = false;
            StateHasChanged();
        }
    }

    public void GoToMatch(Matchup matchup)
    {
        if (GameHasAllPlayers(matchup))
        {
            _navigation.NavigateTo($"match/{matchup.Id}?playoffSeason={_playoffs.Season}");
        }
    }
    
    private string GetClasses(Matchup matchup)
    {
        var classes = UserIsOneOfThePlayers(matchup) ? "bg-light card mx-4 my-1" : "card mx-4 my-1";
        if (matchup.Player2 == ObjectId.Empty)
        {
            classes += " invisible";
        }
        if (GameHasAllPlayers(matchup))
        {
            classes += " cursor";
        }
        return classes;
    }

    private bool GameHasAllPlayers(Matchup matchup)
    {
        return !(GetName(matchup.Player1) == _unknownPlayer || GetName(matchup.Player2) == _unknownPlayer);
    }

    private bool UserIsOneOfThePlayers(Matchup matchup)
    {
        return _loggedInUserState.LoggedInPlayer.Id == matchup.Player1 || _loggedInUserState.LoggedInPlayer.Id == matchup.Player2;
    }
    
    private string GetName(ObjectId playerId)
    {
        if (playerId == ObjectId.Empty) return "Freewin";

        return _playersInPlayoffs.FirstOrDefault(p => p.Id == playerId)?.DisplayName ?? _unknownPlayer;
    }

    private async void SelectSeason(int season)
    {
        _loading = true;
        await LoadPlayoffs(season);
    }
}
