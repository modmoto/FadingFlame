@page "/admin"
@using FadingFlame.Leagues
@using FadingFlame.Discord
@using FadingFlame.Players
@using FadingFlame.Playoffs
@inject UserState _userState
@inject ILeagueCommandHandler _leagueCommandHandler
@inject IPlayoffCommandHandler _playoffCommandHandler
@inject IPlayerRepository _playerRepository
@inject ILeagueRepository _leagueRepository
@inject IDiscordBot _discordBot
@inject NavigationManager _navigation

@if (_userState.UserIsAdmin)
{
    <div class="m-2">
        <button disabled="@_loadingLeagues" type="button" class="btn btn-primary" @onclick="CreateLeagues">
            @if (_loadingLeagues)
            {
                <span class="spinner-border spinner-border-sm mr-1"></span>
            }
            Reset Season 1
        </button>
    </div>
    
    <div class="m-2">
        <button disabled="@_loadingDiscord" type="button" class="btn btn-primary" @onclick="SyncDiscord">
            @if (_loadingDiscord)
            {
                <span class="spinner-border spinner-border-sm mr-1"></span>
            }
            Sync Discord Tags
        </button>
    </div>
    
    <div class="m-2">
        <button disabled="@_loadingPlayoffs" type="button" class="btn btn-primary" @onclick="CreatePlayoffs">
            @if (_loadingPlayoffs)
            {
                <span class="spinner-border spinner-border-sm mr-1"></span>
            }
            Create Playoffs Season 1
        </button>
    </div>
    <div class="row">
        <div class="card m-2" style="width: 28rem;">
            <div class="card-body">
                <div class="card-title">Users with lists (@_playersWithList.Count):</div>
                <ul class="list-group list-group-flush">
                    @foreach (var player in _playersWithList)
                    {
                        <li class="list-group-item cursor" @onclick="() => GoToPlayer(player)">@player.DisplayName / @player.DiscordTag</li>
                    }
                </ul>
            </div>
        </div>
        
        <div class="card m-2" style="width: 28rem;">
            <div class="card-body">
                <div class="card-title">Users without lists (@_playersWithOutList.Count):</div>
                <ul class="list-group list-group-flush">
                    @foreach (var player in _playersWithOutList)
                    {
                        <li class="list-group-item cursor" @onclick="() => GoToPlayer(player)">@player.DisplayName / @player.DiscordTag</li>
                    }
                </ul>
            </div>
        </div>
    </div>
}

@code {
    private bool _loadingLeagues;
    private bool _loadingPlayoffs;
    private bool _loadingDiscord;
    private List<Player> _playersWithList = new();
    private List<Player> _playersWithOutList = new();
    
    protected override void OnInitialized()
    {
        _userState.UserLoggedIn += (_, _) => StateHasChanged();
    }
    
    protected override async Task OnInitializedAsync()
    {
        _playersWithList = await _playerRepository.LoadAllWitList();
        _playersWithOutList = await _playerRepository.LoadAllWithoutList();
    }

    private async Task CreateLeagues()
    {
        _loadingLeagues = true;
        await _leagueCommandHandler.CreateLeagues();
        _loadingLeagues = false;
    }
    
    private async Task SyncDiscord()
    {
        _loadingDiscord = true;
        var leagues = await _leagueRepository.LoadForSeason(LeagueConstants.CurrentSeason);
        await _discordBot.CreateLeagueChannelsAndTags(leagues);
        _loadingDiscord = false;
    }
    
    private async Task CreatePlayoffs()
    {
        _loadingPlayoffs = true;
        await _playoffCommandHandler.CreatePlayoffs();
        _loadingPlayoffs = false;
    }

    private void GoToPlayer(Player player)
    {
        _navigation.NavigateTo($"player/{player.Id}");
    }
}
