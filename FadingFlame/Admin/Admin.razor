@page "/admin"
@using FadingFlame.Leagues
@using FadingFlame.Discord
@using FadingFlame.Players
@using FadingFlame.Playoffs
@inject UserState _userState
@inject ILeagueCommandHandler _leagueCommandHandler
@inject IPlayoffCommandHandler _playoffCommandHandler
@inject IPlayerRepository _playerRepository
@inject ILeagueRepository _leagueRepository
@inject IDiscordBot _discordBot
@inject NavigationManager _navigation
@inject ISeasonRepository _seasonRepository

@if (_userState.UserIsAdmin)
{
    <div class="container">
        <div class="row">
            <div class="m-2 col">
                <button disabled="@_loadingLeagues" type="button" class="btn btn-primary" @onclick="CreateLeagues">
                    @if (_loadingLeagues)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Reset Season 1
                </button>
            </div>

            <div class="m-2 col">
                <button disabled="@_loadingDiscord" type="button" class="btn btn-primary" @onclick="SyncDiscord">
                    @if (_loadingDiscord)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Sync Discord Tags
                </button>
            </div>

            <div class="m-2 col">
                <button disabled="@_loadingPlayoffs" type="button" class="btn btn-primary" @onclick="CreatePlayoffs">
                    @if (_loadingPlayoffs)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Create Playoffs Season 1
                </button>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="row">

        <div class="col">
            <h4>Current Season:</h4>
            <EditForm OnSubmit="() => SaveSeason(_editCurrentSeasonModel)" Model="@_editCurrentSeasonModel">
                <DataAnnotationsValidator/>
                <div class="form-group">
                    <div class="pb-2">List Submission deadline:</div>
                    <InputDate @bind-Value="_editCurrentSeasonModel.ListSubmissionDeadline" class="form-control mb-3"/>
                    <ValidationMessage For="@(() => _editCurrentSeasonModel.ListSubmissionDeadline)"/>
                </div>
                <DataAnnotationsValidator/>
                <div class="form-group">
                  <div class="pb-2">Start date:</div>
                  <InputDate @bind-Value="_editCurrentSeasonModel.StartDate" class="form-control mb-3"/>
                  <ValidationMessage For="@(() => _editCurrentSeasonModel.StartDate)"/>
                </div>
                <button disabled="@_loadingSeasons" class="btn btn-primary">
                    @if (_loadingSeasons)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Save current season
                </button>
            </EditForm>
        </div>
        <div class="col">
            <h4>Next Season:</h4>
            <EditForm OnSubmit="() => SaveSeason(_editNextSeasonModel)" Model="@_editNextSeasonModel">
                <DataAnnotationsValidator/>
                <div class="form-group">
                    <div class="pb-2">List Submission deadline:</div>
                    <InputDate @bind-Value="_editNextSeasonModel.ListSubmissionDeadline" class="form-control mb-3"/>
                    <ValidationMessage For="@(() => _editNextSeasonModel.ListSubmissionDeadline)"/>
                </div>
                <DataAnnotationsValidator/>
                <div class="form-group">
                    <div class="pb-2">Start date:</div>
                    <InputDate @bind-Value="_editNextSeasonModel.StartDate" class="form-control mb-3"/>
                    <ValidationMessage For="@(() => _editNextSeasonModel.StartDate)"/>
                </div>
                <button disabled="@_loadingSeasons" class="btn btn-primary">
                    @if (_loadingSeasons)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Save next season
                </button>
            </EditForm>
        </div>
    </div>
    </div>

    <h3 class="m-2">Registered players: (@(_playersWithOutList.Count + _playersWithList.Count))</h3>
    <div class="row">
        <div class="card m-2" style="width: 28rem;">
            <div class="card-body">
                <div class="card-title">Users with lists (@_playersWithList.Count):</div>
                <ul class="list-group list-group-flush">
                    @foreach (var player in _playersWithList)
                    {
                        <li class="list-group-item cursor" @onclick="() => GoToPlayer(player)">@player.DisplayName / @player.DiscordTag</li>
                    }
                </ul>
            </div>
        </div>
        
        <div class="card m-2" style="width: 28rem;">
            <div class="card-body">
                <div class="card-title">Users without lists (@_playersWithOutList.Count):</div>
                <ul class="list-group list-group-flush">
                    @foreach (var player in _playersWithOutList)
                    {
                        <li class="list-group-item cursor" @onclick="() => GoToPlayer(player)">@player.DisplayName / @player.DiscordTag</li>
                    }
                </ul>
            </div>
        </div>
    </div>
}

@code {
    private bool _loadingLeagues;
    private bool _loadingPlayoffs;
    private bool _loadingDiscord;
    private bool _loadingSeasons;
    private List<Player> _playersWithList = new();
    private List<Player> _playersWithOutList = new();
    private Season _editCurrentSeasonModel = new();
    private Season _editNextSeasonModel = new();

    protected override void OnInitialized()
    {
        _userState.UserLoggedIn += (_, _) => StateHasChanged();
    }
    
    protected override async Task OnInitializedAsync()
    {
        _playersWithList = await _playerRepository.LoadAllWitList();
        _playersWithOutList = await _playerRepository.LoadAllWithoutList();
        var loadSeasons = await _seasonRepository.LoadSeasons();
        if (loadSeasons.Count > 1)
        {
            _editNextSeasonModel = loadSeasons[0];
            _editCurrentSeasonModel = loadSeasons[1];
        }
        else if (loadSeasons.Count > 0)
        {
            _editCurrentSeasonModel = loadSeasons[0];
            _editNextSeasonModel.SeasonId = 3;
        }
        else
        {
            _editNextSeasonModel.SeasonId = 3;
            _editCurrentSeasonModel.SeasonId = 2;
        }
    }

    private async Task CreateLeagues()
    {
        _loadingLeagues = true;
        await _leagueCommandHandler.CreateLeagues();
        _loadingLeagues = false;
    }
    
    private async Task SyncDiscord()
    {
        _loadingDiscord = true;
        var leagues = await _leagueRepository.LoadForSeason(LeagueConstants.CurrentSeason);
        await _discordBot.CreateLeagueChannelsAndTags(leagues);
        _loadingDiscord = false;
    }
    
    private async Task CreatePlayoffs()
    {
        _loadingPlayoffs = true;
        await _playoffCommandHandler.CreatePlayoffs();
        _loadingPlayoffs = false;
    }

    private void GoToPlayer(Player player)
    {
        _navigation.NavigateTo($"player/{player.Id}");
    }

    private async Task SaveSeason(Season season)
    {
        _loadingSeasons = true;
        await _seasonRepository.Update(season);
        _loadingSeasons = false;
    }
}
