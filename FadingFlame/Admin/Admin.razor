@page "/admin"
@using FadingFlame.Leagues
@using FadingFlame.Discord
@using FadingFlame.Players
@using FadingFlame.Playoffs
@inject UserState _userState
@inject ILeagueCommandHandler _leagueCommandHandler
@inject IPlayoffCommandHandler _playoffCommandHandler
@inject IPlayerRepository _playerRepository
@inject ILeagueRepository _leagueRepository
@inject IDiscordBot _discordBot
@inject NavigationManager _navigation
@inject ISeasonRepository _seasonRepository
@inject SeasonState _seasonState

@if (_userState.UserIsAdmin)
{
    <h3 class="m-2">Registered players: (@(_playersWithOutList.Count + _playersWithList.Count))</h3>
    <div class="row">
        <div class="card m-2" style="width: 28rem;">
            <div class="card-body">
                <div class="card-title">Users with lists (@_playersWithList.Count):</div>
                <ul class="list-group list-group-flush">
                    @foreach (var player in _playersWithList)
                    {
                        <li class="list-group-item cursor" @onclick="() => GoToPlayer(player)">@player.DisplayName / @player.DiscordTag</li>
                    }
                </ul>
            </div>
        </div>
        
        <div class="card m-2" style="width: 28rem;">
            <div class="card-body">
                <div class="card-title">Users without lists (@_playersWithOutList.Count):</div>
                <ul class="list-group list-group-flush">
                    @foreach (var player in _playersWithOutList)
                    {
                        <li class="list-group-item cursor" @onclick="() => GoToPlayer(player)">@player.DisplayName / @player.DiscordTag</li>
                    }
                </ul>
            </div>
        </div>
    </div>

    <div class="pt-3 pb-3 alert alert-danger text-center" role="alert">
        Danger Zone! I recomend asking modmoto to see what each button does ;)
    </div>

    <div class="container">
        <div class="row">
            <div class="m-2 col">
                <button disabled="@_loadingLeagues" type="button" class="btn btn-primary" @onclick="CreateLeagues">
                    @if (_loadingLeagues)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Reset Season 1
                </button>
            </div>

            <div class="m-2 col">
                <button disabled="@_loadingDiscord" type="button" class="btn btn-primary" @onclick="SyncDiscord">
                    @if (_loadingDiscord)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Sync Discord Tags
                </button>
            </div>

            <div class="m-2 col">
                <button disabled="@_loadingPlayoffs" type="button" class="btn btn-primary" @onclick="CreatePlayoffs">
                    @if (_loadingPlayoffs)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Create Playoffs Season 1
                </button>
            </div>
        </div>
    </div>
    @if (_seasonState.NotFoundPlayers.Any())
    {
        <div class="row">
            <div class="card m-2" style="width: 28rem;">
                <div class="card-body">
                    <div class="card-title">Not found players on create (@_seasonState.NotFoundPlayers.Count):</div>
                    <ul class="list-group list-group-flush">
                        @foreach (var player in _seasonState.NotFoundPlayers)
                        {
                            <li class="list-group-item">@player</li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    }

    <div class="container">
        <div class="row">
            <div class="col">
                <h4>Current Season (@_seasonState.CurrentSeason.SeasonId):</h4>
                <EditForm OnSubmit="() => SaveSeason(_seasonState.CurrentSeason)" Model="@_seasonState.CurrentSeason">
                    <DataAnnotationsValidator/>
                    <div class="form-group">
                        <div class="pb-2">List Submission deadline:</div>
                        <InputDate @bind-Value="_seasonState.CurrentSeason.ListSubmissionDeadline" class="form-control mb-3"/>
                        <ValidationMessage For="@(() => _seasonState.CurrentSeason.ListSubmissionDeadline)"/>
                    </div>
                    <DataAnnotationsValidator/>
                    <div class="form-group">
                        <div class="pb-2">Start date:</div>
                        <InputDate @bind-Value="_seasonState.CurrentSeason.StartDate" class="form-control mb-3"/>
                        <ValidationMessage For="@(() => _seasonState.CurrentSeason.StartDate)"/>
                    </div>
                    <div class="form-group">
                        <InputCheckbox class="form-check-input" @bind-Value="_seasonState.CurrentSeason.IsPubliclyVisible"/>
                        <label class="form-check-label">
                            Season is publicly visible
                        </label>
                    </div>
                    <button disabled="@_loadingSeasons" class="btn btn-primary">
                        @if (_loadingSeasons)
                        {
                            <span class="spinner-border spinner-border-sm mr-1"></span>
                        }
                        Save current season
                    </button>
                </EditForm>
            </div>
            <div class="col">
                <h4>Next Season (@_seasonState.NextSeason.SeasonId):</h4>
                <EditForm OnSubmit="() => SaveSeason(_seasonState.NextSeason)" Model="@_seasonState.NextSeason">
                    <DataAnnotationsValidator/>
                    <div class="form-group">
                        <div class="pb-2">List Submission deadline:</div>
                        <InputDate @bind-Value="_seasonState.NextSeason.ListSubmissionDeadline" class="form-control mb-3"/>
                        <ValidationMessage For="@(() => _seasonState.NextSeason.ListSubmissionDeadline)"/>
                    </div>
                    <DataAnnotationsValidator/>
                    <div class="form-group">
                        <div class="pb-2">Start date:</div>
                        <InputDate @bind-Value="_seasonState.NextSeason.StartDate" class="form-control mb-3"/>
                        <ValidationMessage For="@(() => _seasonState.NextSeason.StartDate)"/>
                    </div>
                    <div class="form-group">
                        <InputCheckbox class="form-check-input" @bind-Value="_seasonState.NextSeason.IsPubliclyVisible"/>
                        <label class="form-check-label">
                            Season is publicly visible
                        </label>
                    </div>
                    <button disabled="@_loadingSeasons" class="btn btn-primary">
                        @if (_loadingSeasons)
                        {
                            <span class="spinner-border spinner-border-sm mr-1"></span>
                        }
                        Save next season
                    </button>
                </EditForm>
            </div>
        </div>
        <div class="row mt-2">
            <div class="col"></div>
            <div class="col">
                <button disabled="@_loadingEndingSeason" type="button" class="btn btn-danger" @onclick="CreateNextSeason">
                    @if (_loadingEndingSeason)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Create new next season
                </button>
                <button disabled="@_loadingEndingSeason" class="btn btn-danger" @onclick="DeleteCurrentSeason">
                    @if (_loadingEndingSeason)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Delete next season
                </button>
            </div>
        </div>
    </div>
}

@code {
    private bool _loadingLeagues;
    private bool _loadingPlayoffs;
    private bool _loadingDiscord;
    private bool _loadingSeasons;
    private bool _loadingEndingSeason;
    private List<Player> _playersWithList = new();
    private List<Player> _playersWithOutList = new();

    protected override void OnInitialized()
    {
        _userState.UserLoggedIn += (_, _) => StateHasChanged();
        _seasonState.SeasonsChanged += (_, _) => StateHasChanged();
    }
    
    protected override async Task OnInitializedAsync()
    {
        _playersWithList = await _playerRepository.LoadAllWitList();
        _playersWithOutList = await _playerRepository.LoadAllWithoutList();
    }

    private async Task CreateLeagues()
    {
        _loadingLeagues = true;
        await _leagueCommandHandler.CreateLeagues();
        _loadingLeagues = false;
    }
    
    private async Task SyncDiscord()
    {
        _loadingDiscord = true;
        var leagues = await _leagueRepository.LoadForSeason(_seasonState.CurrentSeason.SeasonId);
        await _discordBot.CreateLeagueChannelsAndTags(leagues);
        _loadingDiscord = false;
    }
    
    private async Task CreatePlayoffs()
    {
        _loadingPlayoffs = true;
        await _playoffCommandHandler.CreatePlayoffs();
        _loadingPlayoffs = false;
    }

    private void GoToPlayer(Player player)
    {
        _navigation.NavigateTo($"player/{player.Id}");
    }

    private async Task SaveSeason(Season season)
    {
        _loadingSeasons = true;
        await _seasonRepository.Update(season);
        _loadingSeasons = false;
    }

    private async Task CreateNextSeason()
    {
        _loadingEndingSeason = true;

        _seasonState.AppendSeason(new Season
        {
            SeasonId = _seasonState.NextSeason.SeasonId + 1
        });

        await _seasonRepository.Update(_seasonState.NextSeason);
        _loadingEndingSeason = false;
    }

    private async Task DeleteCurrentSeason()
    {
        _loadingEndingSeason = true;

        var season = _seasonState.PopLastSeason();

        await _seasonRepository.Delete(season);
        _loadingEndingSeason = false;
    }
}
