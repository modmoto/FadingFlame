@page "/admin"
@using FadingFlame.Leagues
@using FadingFlame.Discord
@using FadingFlame.Lists
@using FadingFlame.Matchups
@using FadingFlame.Players
@using FadingFlame.Playoffs
@using MongoDB.Bson

@if (_loggedInUserState.UserIsAdmin)
{
    <nav>
        <div class="nav nav-tabs" id="nav-tab" role="tablist">
            <button class="nav-link active" id="nav-players-tab" data-bs-toggle="tab" data-bs-target="#nav-players" type="button" role="tab" aria-controls="nav-players" aria-selected="true">Players</button>
            <button class="nav-link" id="nav-lists-tab" data-bs-toggle="tab" data-bs-target="#nav-lists" type="button" role="tab" aria-controls="nav-lists" aria-selected="false">Proposed list changes (@_pendingListChanges.Count)</button>
            <button class="nav-link" id="nav-penalties-tab" data-bs-toggle="tab" data-bs-target="#nav-penalties" type="button" role="tab" aria-controls="nav-penalties" aria-selected="false">Penalties</button>
            <button class="nav-link" id="nav-management-tab" data-bs-toggle="tab" data-bs-target="#nav-management" type="button" role="tab" aria-controls="nav-management" aria-selected="false">Season Management</button>
            <button class="nav-link" id="nav-next-season-tab" data-bs-toggle="tab" data-bs-target="#nav-next-season" type="button" role="tab" aria-controls="nav-next-season" aria-selected="false">Next Season Games</button>
        </div>
    </nav>
    <div class="tab-content" id="nav-tabContent">
        <div class="tab-pane fade show active" id="nav-players" role="tabpanel" aria-labelledby="nav-players-tab">
            <div class="row">
                <div class="card m-2" style="width: 28rem;">
                    <div class="card-body">
                        <div class="card-title">Users enrolled in next season (@_playersEnrolledInNextSeason.Count):</div>
                        <ul class="list-group list-group-flush">
                            @foreach (var player in _playersEnrolledInNextSeason)
                            {
                                <li class="list-group-item">
                                    <NavLink class="nolinkstyle" Match="NavLinkMatch.All" href="@($"/player/{player.Id}")">
                                        @player.DisplayName / @player.DiscordTag
                                    </NavLink>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
                <div class="card m-2" style="width: 28rem;">
                    <div class="card-body">
                        <div class="card-title">Registered players (@_players.Count):</div>
                        <ul class="list-group list-group-flush">
                            @foreach (var player in _players)
                            {
                                <li class="list-group-item">
                                    <NavLink class="nolinkstyle" Match="NavLinkMatch.All" href="@($"/player/{player.Id}")">
                                        @player.DisplayName / @player.DiscordTag
                                    </NavLink>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <div class="tab-pane fade" id="nav-lists" role="tabpanel" aria-labelledby="nav-lists-tab">
            <h3 class="m-2">Pending requests of listchanges:</h3>
            <div class="container">
                @foreach (var army in _pendingListChanges)
                {
                    @if (army.List1.ProposedListChange != null)
                    {
                        <ListApproveComponent
                            List="army.List1"
                            Player="@GetPlayer(army)"
                            Loading="_loadingApprovalOfList"
                            OnApproveListChange="() => ApproveList1(army)"
                            OnRejectListChange="() => RejectList1(army)"/>
                    }
                    @if (army.List2.ProposedListChange != null)
                    {
                        <ListApproveComponent
                            List="army.List2"
                            Player="@GetPlayer(army)"
                            Loading="_loadingApprovalOfList"
                            OnApproveListChange="() => ApproveList2(army)"
                            OnRejectListChange="() => RejectList2(army)"/>
                    }
                }
            </div>
        </div>
        <div class="tab-pane fade" id="nav-penalties" role="tabpanel" aria-labelledby="nav-penalties-tab">
        <h3 class="m-2">Players that should get a penalty for not playing lists (@_pendingPenalties.Count):</h3>
        <div class="container">
            @foreach (var penaltyUser in _pendingPenalties)
            {
                <div class="card mb-3 mt-1">
                    <div class="card-body">
                        <div class="row align-items-start">
                            <div class="form-group mb-3">
                                <NavLink class="nolinkstyle" Match="NavLinkMatch.All" href="@($"/player/{penaltyUser.PlayerId}")">
                                    <b>Penalty for @penaltyUser.PlayerDisplayName / @penaltyUser.PlayerDiscordTag in League @penaltyUser.LeagueDivisionId</b>
                                </NavLink>
                            </div>
                        </div>
                        <details>
                            <summary>Show lists</summary>
                            <div class="row align-items-start mt-1">
                                <div class="col">
                                    <div class="form-group">
                                        <label>List 1: </label>
                                        <div style="white-space:pre-wrap;">@penaltyUser.List1</div>
                                    </div>
                                </div>
                                <div class="col">
                                    <div class="form-group">
                                        <label>List 2: </label>
                                        <div style="white-space:pre-wrap;">@penaltyUser.List2</div>
                                    </div>
                                </div>
                            </div>
                        </details>
                    </div>
                </div>
            }
        </div>
    </div>
    
        <div class="tab-pane fade" id="nav-management" role="tabpanel" aria-labelledby="nav-management-tab">
            <div class="pt-3 pb-3 m-3 alert alert-danger text-center" role="alert">
                Danger Zone! I recomend asking modmoto to see what each button does ;)
            </div>
               
            <div class="container">
                <div class="row">
                    <div class="m-2 col">
                        <button disabled="@(_loadingMoveLeagueOver || _unfinishedRelegations.Any() || _relegationMatchesNotCreatedEverywhere)" type="button" class="btn btn-primary" @onclick="MakePromotionsAndDemotionsOver">
                            @if (_loadingMoveLeagueOver)
                            {
                                <span class="spinner-border spinner-border-sm mr-1"></span>
                            }
                            @if (_relegationMatchesNotCreatedEverywhere)
                            {
                                <span>Relegation matches not created</span>
                            }
                            else if (_unfinishedRelegations.Any())
                            {
                                <span>Relegation matches not finished, can not make pro and demotions</span>
                            }
                            else
                            {
                                <span>Make promotions and demotions</span>
                            }
                        </button>
                    </div>
                    <div class="m-2 col">
                        @if (!_leaguesNextSeason.Any())
                        {
                            <button disabled type="button" class="btn btn-primary">
                                Matches not created for next season, make promotions and demotions first to make next season official
                            </button>
                        } 
                        else if (_leaguesNextSeason.Any(l => l.Players.Count != League.MaxPlayerCount))
                        {
                            <button disabled type="button" class="btn btn-primary">
                                Not all leagues have @League.MaxPlayerCount players, add players or delete the league
                            </button>
                        }
                        else
                        {
                            <button disabled="@_loadingMakingSeasonOfficial" class="btn btn-primary" @onclick="ApproveMatchesNextSeason">
                                @if (_loadingMakingSeasonOfficial)
                                {
                                    <span class="spinner-border spinner-border-sm mr-1"></span>
                                }
                                Make next season official and release lists and matches
                            </button>
                        }
                    </div>
                    <div class="m-2 col">
                        <button disabled="@_loadingDiscordTags" type="button" class="btn btn-primary" @onclick="MakeDiscordTags">
                            @if (_loadingDiscordTags)
                            {
                                <span class="spinner-border spinner-border-sm mr-1"></span>
                            }
                            Create Discord Tags
                        </button>
                    </div>
                    <div class="m-2 col">
                        @if (_relegationMatchesStarted)
                        {
                            <button disabled type="button" class="btn btn-primary">
                                There are finished relegation matches, can not create relegation matches anymore
                            </button>
                        }
                        else
                        {
                            <button disabled="@_loadingRelegationMatches" type="button" class="btn btn-primary" @onclick="CreateRelegatonMatches">
                                @if (_loadingRelegationMatches)
                                {
                                    <span class="spinner-border spinner-border-sm mr-1"></span>
                                }
                                Create Relegation matches
                            </button>
                        }
                    </div>
                    <div class="m-2 col">
                        @if (_playoffsStarted)
                        {
                            <button disabled type="button" class="btn btn-primary">
                                There are finished playoff games, can not create playoffs anymore
                            </button>
                        }
                        else
                        {
                            <button disabled="@_loadingPlayoffs" type="button" class="btn btn-primary" @onclick="CreatePlayoffs">
                                @if (_loadingPlayoffs)
                                {
                                    <span class="spinner-border spinner-border-sm mr-1"></span>
                                }
                                Create Playoffs Season 1
                            </button>
                        }
                    </div>
                </div>
            </div>
            <div class="container">
                <hr class="my-4"/>
                <div class="row">
                    @if (_playersNotFound.Any())
                    {
                        <h2>Was not able to create tag for players</h2>
                        foreach (var player in _playersNotFound)
                        {
                            <div>@player.LeagueTag - @player.DisplayName / @player.DiscordTag</div> 
                        }
                    }
                </div>
                <div class="row">
                    <div class="col">
                        <h4>Current Season (@_seasonState.CurrentSeason.SeasonId):</h4>
                        <EditForm OnSubmit="() => SaveSeason(_seasonState.CurrentSeason)" Model="@_seasonState.CurrentSeason">
                            <DataAnnotationsValidator/>
                            <div class="form-group">
                                <div class="pb-2">List Submission deadline:</div>
                                <InputDate @bind-Value="_seasonState.CurrentSeason.ListSubmissionDeadline" class="form-control mb-3"/>
                                <ValidationMessage For="@(() => _seasonState.CurrentSeason.ListSubmissionDeadline)"/>
                            </div>
                            <DataAnnotationsValidator/>
                            <div class="form-group">
                                <div class="pb-2">Start date:</div>
                                <InputDate @bind-Value="_seasonState.CurrentSeason.StartDate" class="form-control mb-3"/>
                                <ValidationMessage For="@(() => _seasonState.CurrentSeason.StartDate)"/>
                            </div>
                            <div class="form-group">
                                <InputCheckbox class="form-check-input" @bind-Value="_seasonState.CurrentSeason.IsPubliclyVisible"/>
                                <label class="form-check-label">
                                    Season is publicly visible
                                </label>
                            </div>
                            <button disabled="@_loadingSeasons" class="btn btn-primary">
                                @if (_loadingSeasons)
                                {
                                    <span class="spinner-border spinner-border-sm mr-1"></span>
                                }
                                Save current season
                            </button>
                        </EditForm>
                    </div>
                    <div class="col">
                        <h4>Next Season (@_seasonState.NextSeason.SeasonId):</h4>
                        <EditForm OnSubmit="() => SaveSeason(_seasonState.NextSeason)" Model="@_seasonState.NextSeason">
                            <DataAnnotationsValidator/>
                            <div class="form-group">
                                <div class="pb-2">List Submission deadline:</div>
                                <InputDate @bind-Value="_seasonState.NextSeason.ListSubmissionDeadline" class="form-control mb-3"/>
                                <ValidationMessage For="@(() => _seasonState.NextSeason.ListSubmissionDeadline)"/>
                            </div>
                            <DataAnnotationsValidator/>
                            <div class="form-group">
                                <div class="pb-2">Start date:</div>
                                <InputDate @bind-Value="_seasonState.NextSeason.StartDate" class="form-control mb-3"/>
                                <ValidationMessage For="@(() => _seasonState.NextSeason.StartDate)"/>
                            </div>
                            <div class="form-group">
                                <InputCheckbox class="form-check-input" @bind-Value="_seasonState.NextSeason.IsPubliclyVisible"/>
                                <label class="form-check-label">
                                    Season is publicly visible
                                </label>
                            </div>
                            <button disabled="@_loadingSeasons" class="btn btn-primary">
                                @if (_loadingSeasons)
                                {
                                    <span class="spinner-border spinner-border-sm mr-1"></span>
                                }
                                Save next season
                            </button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
        <div class="tab-pane fade" id="nav-next-season" role="tabpanel" aria-labelledby="nav-next-season-tab">
            <div class="container">
                <div class="row">
                    <div class="col">
                        <h3 class="m-2">This season:</h3>
                        @foreach (var league in _leaguesThisSeason)
                        {
                            <div class="card mt-2">
                                <div class="card-header cursor" @onclick="() => GoToLeague(league)">
                                    @league.DivisionId @league.Name
                                    <button type="button" class="btn btn-danger float-end" style="visibility: collapse">
                                        Delete League
                                    </button>
                                </div>
                                <div class="card-body">
                                    @foreach (var player in league.Players.Select((value, index) => new {value, index}))
                                    {
                                        <div>@(player.index + 1). @GetPlayer(player.value.Id)?.DisplayName</div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                    <div class="col">
                        <h3 class="m-2">Next season:</h3>
                        @foreach (var league in _leaguesNextSeason)
                        {
                            <div class="card mt-2">
                                <div class="card-header cursor" @onclick="() => GoToLeague(league)">
                                    @league.DivisionId @league.Name
                                    <button type="button" class="btn btn-danger float-end" @onclick="() => DeleteLeague(league)" @onclick:preventDefault="true" @onclick:stopPropagation="true">
                                        Delete League
                                    </button>
                                </div>
                                <div class="card-body">
                                    @foreach (var player in league.Players.Select((value, index) => new {value, index}))
                                    {
                                        <div>@(player.index + 1). @GetPlayer(player.value.Id)?.DisplayName</div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@inject LoggedInUserState _loggedInUserState
@inject IPlayoffCommandHandler _playoffCommandHandler
@inject IPlayerRepository _playerRepository
@inject ILeagueRepository _leagueRepository
@inject IDiscordBot _discordBot
@inject NavigationManager _navigation
@inject ISeasonRepository _seasonRepository
@inject SeasonState _seasonState
@inject ILeagueCreationService _leagueCreationService
@inject IListAcceptAndRejectService _acceptAndRejectService
@inject IListRepository _listRepository
@inject IMmrRepository _mmrRepository
@inject IMatchupRepository _matchupRepository
@inject PenaltyService _penaltyService
@inject IPlayoffRepository _playoffRepository

@code {
    private bool _loadingPlayoffs;
    private bool _loadingSeasons;
    private bool _loadingApprovalOfList;
    private bool _loadingMoveLeagueOver;
    private bool _loadingRelegationMatches;
    private bool _loadingDiscordTags;
    private List<Player> _players = new();
    private List<Player> _playersEnrolledInNextSeason = new();
    private List<Army> _pendingListChanges = new();
    private List<PenaltyUser> _pendingPenalties = new();
    private List<League> _leaguesThisSeason = new();
    private List<League> _leaguesNextSeason = new();
    private List<Matchup> _unfinishedRelegations = new();
    private bool _relegationMatchesNotCreatedEverywhere;
    private bool _relegationMatchesStarted;
    private bool _playoffsStarted;
    private bool _loadingMakingSeasonOfficial;
    private List<PlayerAndLeagueError> _playersNotFound = new();

    protected override void OnInitialized()
    {
        _loggedInUserState.UserLoggedIn += (_, _) => StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _players = await _playerRepository.LoadAll();
        _playersEnrolledInNextSeason = await _playerRepository.PlayersThatEnrolledInNextSeason();
        _pendingListChanges = await _listRepository.LoadWithPendingChanges();
        var seasons = await _seasonRepository.LoadSeasons();
        _leaguesNextSeason = await _leagueRepository.LoadForSeason(seasons[0].SeasonId);
        _leaguesThisSeason = await _leagueRepository.LoadForSeason(seasons[1].SeasonId);
        _pendingPenalties = await _penaltyService.GetPenalties(seasons[1].SeasonId);
        var playoff = await _playoffRepository.LoadForSeason(_seasonState.CurrentSeason.SeasonId);
        if (playoff != null)
        {
            _playoffsStarted = playoff.Rounds.Any() && playoff.Rounds.SelectMany(r => r.Matchups).Any(m => m.IsFinished);    
        }
        _relegationMatchesNotCreatedEverywhere = _leaguesThisSeason[0].RelegationMatches.Count == 0;
        var relegationMatches = _leaguesThisSeason.SelectMany(c => c.RelegationMatches).ToList();
        _unfinishedRelegations = relegationMatches.Where(r => !r.IsFinished).ToList();
        _relegationMatchesStarted = !_relegationMatchesNotCreatedEverywhere && relegationMatches.Any(m => m.IsFinished);
    }

    private async Task MakeDiscordTags()
    {
        _loadingDiscordTags = true;
        _playersNotFound = await _discordBot.SetLeagueTagsOnPlayers(_leaguesThisSeason);
        _loadingDiscordTags = false;
    }
    
    private async Task ApproveMatchesNextSeason()
    {
        _loadingMakingSeasonOfficial = true;
        await _leagueCreationService.MakeSeasonOfficial();
        _loadingMakingSeasonOfficial = false;
    }
    private async Task CreatePlayoffs()
    {
        _loadingPlayoffs = true;
        await _playoffCommandHandler.CreatePlayoffs();
        _loadingPlayoffs = false;
    }
    
    private Player GetPlayer(ObjectId playerId)
    {
        return _players.FirstOrDefault(p => p.Id == playerId);
    }

    private async Task SaveSeason(Season season)
    {
        _loadingSeasons = true;
        await _seasonRepository.Update(season);
        _loadingSeasons = false;
    }

    private async void ApproveList1(Army army)
    {
        _loadingApprovalOfList = true;
        await _acceptAndRejectService.ApproveList1(army, GetPlayer(army)?.DiscordTag);
        _loadingApprovalOfList = false;
        StateHasChanged();
    }

    private async void ApproveList2(Army army)
    {
        _loadingApprovalOfList = true;
        await _acceptAndRejectService.ApproveList2(army, GetPlayer(army)?.DiscordTag);
        _loadingApprovalOfList = false;
        StateHasChanged();
    }
    
    private async void RejectList1(Army army)
    {
        _loadingApprovalOfList = true;
        await _acceptAndRejectService.RejectList1(army, GetPlayer(army)?.DiscordTag, true);
        _loadingApprovalOfList = false;
        StateHasChanged();
    }

    private async void RejectList2(Army army)
    {
        _loadingApprovalOfList = true;
        await _acceptAndRejectService.RejectList2(army, GetPlayer(army)?.DiscordTag, true);
        _loadingApprovalOfList = false;
        StateHasChanged();
    }
    
    private Player GetPlayer(Army player)
    {
        return _players.FirstOrDefault(p => p.ArmyIdCurrentSeason == player.Id);
    }

    private async void MakePromotionsAndDemotionsOver()
    {
        _loadingMoveLeagueOver = true;
        await _leagueCreationService.MakePromotionsAndDemotions();
        _loadingMoveLeagueOver = false;
        StateHasChanged();
    }

    private async void CreateRelegatonMatches()
    {
        _loadingRelegationMatches = true;
        await _leagueCreationService.CreateRelegations();
        _loadingRelegationMatches = false;
        StateHasChanged();
    }

    private void GoToLeague(League league)
    {
        _navigation.NavigateTo($"/league/{league.Id}");
    }

    private async Task DeleteLeague(League league)
    {
        await _leagueRepository.DeleteLeague(league.Id);
    }
}
