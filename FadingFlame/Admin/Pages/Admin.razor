@page "/admin"
@using FadingFlame.Leagues
@using FadingFlame.Discord
@using FadingFlame.Lists
@using FadingFlame.Matchups
@using FadingFlame.Players
@using FadingFlame.Playoffs
@using MongoDB.Bson

@if (_loggedInUserState.UserIsAdmin)
{
    <nav>
        <div class="nav nav-tabs" id="nav-tab" role="tablist">
            <button class="nav-link active" id="nav-players-tab" data-bs-toggle="tab" data-bs-target="#nav-players" type="button" role="tab" aria-controls="nav-players" aria-selected="true">Players</button>
            <button class="nav-link" id="nav-lists-tab" data-bs-toggle="tab" data-bs-target="#nav-lists" type="button" role="tab" aria-controls="nav-lists" aria-selected="false">Proposed list changes (@_pendingListChanges.Count)</button>
            <button class="nav-link" id="nav-management-tab" data-bs-toggle="tab" data-bs-target="#nav-management" type="button" role="tab" aria-controls="nav-management" aria-selected="false">Season Management</button>
            <button class="nav-link" id="nav-next-season-tab" data-bs-toggle="tab" data-bs-target="#nav-next-season" type="button" role="tab" aria-controls="nav-next-season" aria-selected="false">Next Season Games</button>
        </div>
    </nav>
    <div class="tab-content" id="nav-tabContent">
        <div class="tab-pane fade show active" id="nav-players" role="tabpanel" aria-labelledby="nav-players-tab">
            <h3 class="m-2">Registered players: (@(_playersWithOutList.Count + _playersWithList.Count))</h3>
            <div class="row">
                <div class="card m-2" style="width: 28rem;">
                    <div class="card-body">
                        <div class="card-title">Users with lists (@_playersWithList.Count):</div>
                        <ul class="list-group list-group-flush">
                            @foreach (var player in _playersWithList)
                            {
                                <li class="list-group-item cursor" @onclick="() => GoToPlayer(player)">@player.DisplayName / @player.DiscordTag</li>
                            }
                        </ul>
                    </div>
                </div>
                    
                <div class="card m-2" style="width: 28rem;">
                    <div class="card-body">
                        <div class="card-title">Users without lists (@_playersWithOutList.Count):</div>
                        <ul class="list-group list-group-flush">
                            @foreach (var player in _playersWithOutList)
                            {
                                <li class="list-group-item cursor" @onclick="() => GoToPlayer(player)">@player.DisplayName / @player.DiscordTag</li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <div class="tab-pane fade" id="nav-lists" role="tabpanel" aria-labelledby="nav-lists-tab">
            <h3 class="m-2">Pending requests of listchanges:</h3>
            <div class="container">
                @foreach (var army in _pendingListChanges)
                {
                    @if (army.List1.ProposedListChange != null)
                    {
                        <ListApproveComponent
                            List="army.List1"
                            Player="@GetPlayer(army)"
                            Loading="_loadingApproval"
                            OnApproveListChange="() => ApproveList1(army)"
                            OnRejectListChange="() => RejectList1(army)"/>
                    }
                    @if (army.List2.ProposedListChange != null)
                    {
                        <ListApproveComponent
                            List="army.List2"
                            Player="@GetPlayer(army)"
                            Loading="_loadingApproval"
                            OnApproveListChange="() => ApproveList2(army)"
                            OnRejectListChange="() => RejectList2(army)"/>
                    }
                }
            </div>
        </div>
        <div class="tab-pane fade" id="nav-management" role="tabpanel" aria-labelledby="nav-management-tab">
            <div class="pt-3 pb-3 m-3 alert alert-danger text-center" role="alert">
                Danger Zone! I recomend asking modmoto to see what each button does ;)
            </div>
               
            <div class="container">
                <div class="row">
                    <div class="m-2 col">
                        <button disabled="@(_loadingMoveLeagueOver || _unfinishedRelegations.Any() || _relegationMatchesNotCreatedEverywhere)" type="button" class="btn btn-primary" @onclick="MakePromotionsAndDemotionsOver">
                            @if (_loadingMoveLeagueOver)
                            {
                                <span class="spinner-border spinner-border-sm mr-1"></span>
                            }
                            @if (_relegationMatchesNotCreatedEverywhere)
                            {
                                <span>Relegation matches not created</span>
                            }
                            else
                            {
                                <span>Make promotions and demotions</span>    
                            }
                        </button>
                        @if (_unfinishedRelegations.Any())
                        {
                            <button disabled="@_loadingTempFinishMatches" class="btn btn-outline-danger mt-2" @onclick="FinishRelegationMatches">
                                @if (_loadingTempFinishMatches)
                                {
                                    <span class="spinner-border spinner-border-sm mr-1"></span>
                                }
                                Finish relegation matches (ONLY TO TEST)
                            </button>
                            <div>
                                <b>Those relegation matches are unfinished (@_unfinishedRelegations.Count):</b>    
                            </div>
                            @foreach (var relegation in _unfinishedRelegations)
                            {
                                <div class="row m-2 cursor" @onclick="() => NavigateToMatch(relegation)">
                                    @relegation.Id
                                </div>
                            }
                        }
                    </div>
                    <div class="m-2 col">
                        <button disabled="@_loadingRelegationMatches" type="button" class="btn btn-primary" @onclick="CreateRelegatonMatches">
                            @if (_loadingRelegationMatches)
                            {
                                <span class="spinner-border spinner-border-sm mr-1"></span>
                            }
                            Recreate Relegation matches (will delete current results)
                        </button>
                    </div>
                    <div class="m-2 col">
                        <button disabled="@_loadingPlayoffs" type="button" class="btn btn-primary" @onclick="CreatePlayoffs">
                            @if (_loadingPlayoffs)
                            {
                                <span class="spinner-border spinner-border-sm mr-1"></span>
                            }
                            Create Playoffs Season 1
                        </button>
                    </div>
                </div>
            </div>
               
            <div class="container">
                <div class="row">
                    <div class="col">
                        <h4>Current Season (@_seasonState.CurrentSeason.SeasonId):</h4>
                        <EditForm OnSubmit="() => SaveSeason(_seasonState.CurrentSeason)" Model="@_seasonState.CurrentSeason">
                            <DataAnnotationsValidator/>
                            <div class="form-group">
                                <div class="pb-2">List Submission deadline:</div>
                                <InputDate @bind-Value="_seasonState.CurrentSeason.ListSubmissionDeadline" class="form-control mb-3"/>
                                <ValidationMessage For="@(() => _seasonState.CurrentSeason.ListSubmissionDeadline)"/>
                            </div>
                            <DataAnnotationsValidator/>
                            <div class="form-group">
                                <div class="pb-2">Start date:</div>
                                <InputDate @bind-Value="_seasonState.CurrentSeason.StartDate" class="form-control mb-3"/>
                                <ValidationMessage For="@(() => _seasonState.CurrentSeason.StartDate)"/>
                            </div>
                            <div class="form-group">
                                <InputCheckbox class="form-check-input" @bind-Value="_seasonState.CurrentSeason.IsPubliclyVisible"/>
                                <label class="form-check-label">
                                    Season is publicly visible
                                </label>
                            </div>
                            <button disabled="@_loadingSeasons" class="btn btn-primary">
                                @if (_loadingSeasons)
                                {
                                    <span class="spinner-border spinner-border-sm mr-1"></span>
                                }
                                Save current season
                            </button>
                        </EditForm>
                    </div>
                    <div class="col">
                        <h4>Next Season (@_seasonState.NextSeason.SeasonId):</h4>
                        <EditForm OnSubmit="() => SaveSeason(_seasonState.NextSeason)" Model="@_seasonState.NextSeason">
                            <DataAnnotationsValidator/>
                            <div class="form-group">
                                <div class="pb-2">List Submission deadline:</div>
                                <InputDate @bind-Value="_seasonState.NextSeason.ListSubmissionDeadline" class="form-control mb-3"/>
                                <ValidationMessage For="@(() => _seasonState.NextSeason.ListSubmissionDeadline)"/>
                            </div>
                            <DataAnnotationsValidator/>
                            <div class="form-group">
                                <div class="pb-2">Start date:</div>
                                <InputDate @bind-Value="_seasonState.NextSeason.StartDate" class="form-control mb-3"/>
                                <ValidationMessage For="@(() => _seasonState.NextSeason.StartDate)"/>
                            </div>
                            <div class="form-group">
                                <InputCheckbox class="form-check-input" @bind-Value="_seasonState.NextSeason.IsPubliclyVisible"/>
                                <label class="form-check-label">
                                    Season is publicly visible
                                </label>
                            </div>
                            <button disabled="@_loadingSeasons" class="btn btn-primary">
                                @if (_loadingSeasons)
                                {
                                    <span class="spinner-border spinner-border-sm mr-1"></span>
                                }
                                Save next season
                            </button>
                        </EditForm>
                    </div>
                </div>
                <div class="row mt-2">
                    <div class="col"></div>
                    <div class="col">
                        <button disabled="@_loadingEndingSeason" type="button" class="btn btn-danger" @onclick="CreateNextSeason">
                            @if (_loadingEndingSeason)
                            {
                                <span class="spinner-border spinner-border-sm mr-1"></span>
                            }
                            Create new next season
                        </button>
                        <button disabled="@_loadingEndingSeason" class="btn btn-danger" @onclick="DeleteCurrentSeason">
                            @if (_loadingEndingSeason)
                            {
                                <span class="spinner-border spinner-border-sm mr-1"></span>
                            }
                            Delete next season
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="tab-pane fade" id="nav-next-season" role="tabpanel" aria-labelledby="nav-next-season-tab">
            <div class="container">
                <div class="row">
                    <div class="col">
                        <h3 class="m-2">This season:</h3>
                        @foreach (var league in _leaguesThisSeason)
                        {
                            <div class="card mt-2">
                                <div class="card-header">
                                    @league.DivisionId @league.Name
                                </div>
                                <div class="card-body">
                                    @foreach (var player in league.Players.Select((value, index) => new {value, index}))
                                    {
                                        <div>@(player.index + 1). @GetPlayer(player.value.Id)?.DisplayName</div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                    <div class="col">
                        <h3 class="m-2">Next season:</h3>
                        @foreach (var league in _leaguesNextSeason)
                        {
                            <div class="card mt-2">
                                <div class="card-header">
                                    @league.DivisionId @league.Name
                                </div>
                                <div class="card-body">
                                    @foreach (var player in league.Players.Select((value, index) => new {value, index}))
                                    {
                                        <div>@(player.index + 1). @GetPlayer(player.value.Id)?.DisplayName</div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@inject LoggedInUserState _loggedInUserState
@inject IPlayoffCommandHandler _playoffCommandHandler
@inject IPlayerRepository _playerRepository
@inject ILeagueRepository _leagueRepository
@inject IDiscordBot _discordBot
@inject NavigationManager _navigation
@inject ISeasonRepository _seasonRepository
@inject SeasonState _seasonState
@inject ILeagueCreationService _leagueCreationService
@inject IListAcceptAndRejectService _acceptAndRejectService
@inject IListRepository _listRepository
@inject IMmrRepository _mmrRepository
@inject IMatchupRepository _matchupRepository

@code {
    private bool _loadingPlayoffs;
    private bool _loadingSeasons;
    private bool _loadingEndingSeason;
    private bool _loadingApproval;
    private bool _loadingMoveLeagueOver;
    private bool _loadingRelegationMatches;
    private bool _loadingTempFinishMatches;
    private List<Player> _playersWithList = new();
    private List<Player> _playersWithOutList = new();
    private List<Army> _pendingListChanges = new();
    private List<League> _leaguesThisSeason = new();
    private List<League> _leaguesNextSeason = new();
    private List<Matchup> _unfinishedRelegations = new();
    private bool _relegationMatchesNotCreatedEverywhere;

    protected override void OnInitialized()
    {
        _loggedInUserState.UserLoggedIn += (_, _) => StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _playersWithList = await _playerRepository.LoadAllWitList();
        _playersWithOutList = (await _playerRepository.LoadAllWithoutList()).Where(u => !u.DisplayName.StartsWith("MISSING")).ToList();
        _playersWithList = await _playerRepository.LoadAllWitList();
        _pendingListChanges = await _listRepository.LoadWithPendingChanges();
        var seasons = await _seasonRepository.LoadSeasons();
        _leaguesNextSeason = await _leagueRepository.LoadForSeason(seasons[0].SeasonId);
        _leaguesThisSeason = await _leagueRepository.LoadForSeason(seasons[1].SeasonId);
        _relegationMatchesNotCreatedEverywhere = _leaguesThisSeason[0].RelegationMatches.Count == 0;
        _unfinishedRelegations = _leaguesThisSeason.SelectMany(c => c.RelegationMatches).Where(r => !r.IsFinished).ToList();
    }
    
    private async Task CreatePlayoffs()
    {
        _loadingPlayoffs = true;
        await _playoffCommandHandler.CreatePlayoffs();
        _loadingPlayoffs = false;
    }
    
    private Player GetPlayer(ObjectId playerId)
    {
        return _playersWithList.FirstOrDefault(p => p.Id == playerId);
    }

    private void GoToPlayer(Player player)
    {
        _navigation.NavigateTo($"player/{player.Id}");
    }

    private async Task SaveSeason(Season season)
    {
        _loadingSeasons = true;
        await _seasonRepository.Update(season);
        _loadingSeasons = false;
    }

    private async Task CreateNextSeason()
    {
        _loadingEndingSeason = true;

        _seasonState.AppendSeason(new Season
        {
            SeasonId = _seasonState.NextSeason.SeasonId + 1
        });

        await _seasonRepository.Update(_seasonState.NextSeason);
        _loadingEndingSeason = false;
    }

    private async Task DeleteCurrentSeason()
    {
        _loadingEndingSeason = true;

        var season = _seasonState.PopLastSeason();

        await _seasonRepository.Delete(season);
        _loadingEndingSeason = false;
    }

    private async void ApproveList1(Army army)
    {
        _loadingApproval = true;
        await _acceptAndRejectService.ApproveList1(army, GetPlayer(army)?.DiscordTag);
        _loadingApproval = false;
        StateHasChanged();
    }

    private async void ApproveList2(Army army)
    {
        _loadingApproval = true;
        await _acceptAndRejectService.ApproveList2(army, GetPlayer(army)?.DiscordTag);
        _loadingApproval = false;
        StateHasChanged();
    }
    
    private async void RejectList1(Army army)
    {
        _loadingApproval = true;
        await _acceptAndRejectService.RejectList1(army, GetPlayer(army)?.DiscordTag, true);
        _loadingApproval = false;
        StateHasChanged();
    }

    private async void RejectList2(Army army)
    {
        _loadingApproval = true;
        await _acceptAndRejectService.RejectList2(army, GetPlayer(army)?.DiscordTag, true);
        _loadingApproval = false;
        StateHasChanged();
    }
    
    private Player GetPlayer(Army player)
    {
        return _playersWithList.FirstOrDefault(p => p.ArmyIdCurrentSeason == player.Id);
    }

    private async void MakePromotionsAndDemotionsOver()
    {
        _loadingMoveLeagueOver = true;
        await _leagueCreationService.MakePromotionsAndDemotions();
        _loadingMoveLeagueOver = false;
        StateHasChanged();
    }

    private async void CreateRelegatonMatches()
    {
        _loadingRelegationMatches = true;
        await _leagueCreationService.CreateRelegations();
        _loadingRelegationMatches = false;
        StateHasChanged();
    }

    private void NavigateToMatch(Matchup relegation)
    {
        _navigation.NavigateTo($"match/{relegation.Id}");
    }

    private async Task FinishRelegationMatches()
    {
        _loadingTempFinishMatches = true;
        foreach (var relegation in _unfinishedRelegations)
        {
            var result = await MatchResult.Create(_mmrRepository, SecondaryObjectiveState.draw, Mmr.Create(), Mmr.Create(), new PlayerResultDto
            {
                Id = relegation.Player1,
                VictoryPoints = 3600
            }, new PlayerResultDto
            {
                Id = relegation.Player2,
                VictoryPoints = 1300
            }, GameList.DeffLoss(), GameList.DeffLoss(), false, relegation.Id);
            relegation.RecordResult(result);
            await _matchupRepository.UpdateMatch(relegation);
        }
        _loadingTempFinishMatches = false;
    }
}
